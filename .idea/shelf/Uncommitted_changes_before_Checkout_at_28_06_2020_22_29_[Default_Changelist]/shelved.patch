Index: evaluation.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from datetime import datetime\r\nfrom os import mkdir\r\nfrom os import path\r\n\r\nfrom statistics import stdev, mean\r\n\r\nfrom configuration import benchmark_relevant_results_file\r\nfrom searching import WikiSearcherModule\r\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\nimport pickle\r\n\r\n\r\nclass WikiEvaluator:\r\n\r\n    def __init__(self):\r\n        # File con la lista delle query di test ed i loro risultati importanti\r\n        self.__relevant_results_file = benchmark_relevant_results_file\r\n        # Modulo che si occupa della ricerca sull'indice wikipedia\r\n        self.__searcher = WikiSearcherModule()\r\n\r\n        # Dizionario che conterrà la precision su 10 livelli di recall per ogni query\r\n        self.__precision_recall_dict = None\r\n        # Dizionario che conterrà i valori di average precision per ogni query\r\n        self.__average_precision_dict = None\r\n        # Variabile che conterrà il valore di mean average precision sul set di query\r\n        self.__mean_avg_precision = None\r\n        # Lista delle medie tra query dei valori di precisione su ogni livello di recall (media per colonne)\r\n        self.__mean_precision_for_level_list = None\r\n        # Lista dei valori di deviazione standard sui valori medi di precisione su livello di recall\r\n        self.__stdev_list = None\r\n        # r_recall con r = 10\r\n        self.__r_recall = None\r\n\r\n    def precision_at_recall_levels(self, n_results=100):\r\n        \"\"\"\r\n        Funzione che si occupa di  valutare la precision su 10 livelli di recall per ogni query tra quelle di default\r\n        :return:\r\n        \"\"\"\r\n        # Inizializzo il dizionario che conterrà i risultati\r\n        self.__precision_recall_dict = dict()\r\n\r\n        # Apro il file contenente le query ed i loro risultati rilevanti\r\n        with open(self.__relevant_results_file, encoding='utf-8') as relevant_res_file:\r\n            # Inizialmente la query \"attuale\" e la \"lista\" dei risultati rilevanti sono nulli\r\n            query = None\r\n            relevant_results = None\r\n\r\n            for line in relevant_res_file:\r\n                # Pulisco la linea del file dai \"whitespaces\"\r\n                clean_line = line.rstrip()\r\n                if clean_line != \"\":\r\n\r\n                    # Se la linea contiene la stringa di una query...\r\n                    if clean_line[0] == \"-\":\r\n                        # Allora valuto i valori di precision per la query precedente, prima di procedere\r\n                        self.__eval_query(query, relevant_results, n_results)\r\n                        # Inizializzo il dizionario dei risultati rilevanti alla nuova query\r\n                        relevant_results = dict()\r\n                        # Ricavo il titolo della nuova query\r\n                        query = clean_line[3:-4]\r\n                    # Se la riga ottenuta dal file non è una query la inserisco tra i risultati rilevanti alla query\r\n                    elif relevant_results is not None:\r\n                        relevant_results[\"\".join([c if c != \"_\" else \" \" for c in clean_line])] = True\r\n\r\n        self.__eval_query(query, relevant_results, n_results)\r\n        return self.__precision_recall_dict\r\n\r\n    def average_precision(self, n_results=100, n_relevant=10):\r\n        try:\r\n            assert n_relevant != 0\r\n        except AssertionError:\r\n            print(\"Error: the number of relevant files must be a positive number\")\r\n            raise ValueError\r\n        try:\r\n            assert n_relevant > 0\r\n        except AssertionError:\r\n            print(\"Error: the number of relevant files can't be zero\")\r\n            raise ZeroDivisionError\r\n\r\n        self.__average_precision_dict = dict()\r\n\r\n        if self.__precision_recall_dict is None:\r\n            self.precision_at_recall_levels(n_results)\r\n        for query, val in self.__precision_recall_dict.items():\r\n            self.__average_precision_dict[query] = sum(val) / n_relevant\r\n\r\n        return self.__average_precision_dict\r\n\r\n    def mean_average_precision(self, n_results=100, n_relevant=10):\r\n        if self.__average_precision_dict is None:\r\n            self.average_precision(n_results, n_relevant)\r\n        self.__mean_avg_precision = \\\r\n            sum([avg_p for avg_p in self.__average_precision_dict.values()]) / len(self.__average_precision_dict)\r\n        return self.__mean_avg_precision\r\n\r\n    def mean_precision_for_rec_level(self, n_results=100):\r\n        # Se i valori di precision per livello di recall di ogni query non sono già stati valutati chiamo la relativa\r\n        # funzione\r\n        if self.__precision_recall_dict is None:\r\n            self.precision_at_recall_levels(n_results)\r\n\r\n        # Divisore, è il numero di query complessivo\r\n        divider = 0\r\n        # Lista delle sommatorie per ogni valore di recall (sum(Pi) con \"i\" che varia da 1 a num_query)\r\n        summations_list = []\r\n        # Per ogni query prendo la lista dei valori di precision su n livelli di recall relativa ad essa\r\n        for values_list in self.__precision_recall_dict.values():\r\n            divider += 1\r\n            position = 0\r\n            # Per ogni livello di recall relativo alla query ne prendo la precision\r\n            for value in values_list:\r\n                # Sommo la precision di questa query ai valori di precision appartenenti allo stesso livello\r\n                # ottenuti dalle altre query\r\n                try:\r\n                    summations_list[position] += value\r\n                except IndexError:\r\n                    summations_list.append(value)\r\n                finally:\r\n                    position += 1\r\n\r\n        self.__mean_precision_for_level_list = []\r\n        # Per ogni livello di recall divido la sua sommatoria di precision per il numero di query considerate\r\n        for summation in summations_list:\r\n            self.__mean_precision_for_level_list.append((summation / divider))\r\n\r\n        return self.__mean_precision_for_level_list  # , self.__stdev_list\r\n\r\n    def precision_stdev_for_level(self, n_results=100):\r\n        if self.__precision_recall_dict is None:\r\n            self.precision_at_recall_levels(n_results)\r\n\r\n        self.__stdev_list = []\r\n\r\n        # Calcolo la devizione standard sulle colonne della tabella di precision su n livelli di recall\r\n        # (le colonne sono i livelli di recall)\r\n        columns = []\r\n        for values_list in self.__precision_recall_dict.values():\r\n            position = 0\r\n            for value in values_list:\r\n                try:\r\n                    columns[position].append(value)\r\n                except IndexError:\r\n                    columns.append([value])\r\n                finally:\r\n                    position += 1\r\n\r\n        for column in columns:\r\n            self.__stdev_list.append(stdev(column))\r\n\r\n        return self.__stdev_list\r\n\r\n    def r_recall(self, n_results=100):\r\n        \"\"\"\r\n        ATTENZIONE: CODICE RIPETUTO PRESO DA precision_at_recall_levels E __eval_query, zona originale di questo\r\n        metodo flaggata appositamente\r\n        \"\"\"\r\n\r\n        # Apro il file contenente le query ed i loro risultati rilevanti\r\n        with open(self.__relevant_results_file, encoding='utf-8') as relevant_res_file:\r\n            # Inizialmente la query \"attuale\" e la \"lista\" dei risultati rilevanti sono nulli\r\n            query = None\r\n            relevant_results = None\r\n            self.__r_recall = dict()\r\n            for line in relevant_res_file:\r\n                # Pulisco la linea del file dai \"whitespaces\"\r\n                clean_line = line.rstrip()\r\n                if clean_line != \"\":\r\n\r\n                    # Se la linea contiene la stringa di una query...\r\n                    if clean_line[0] == \"-\":\r\n\r\n                        ### ZONA ORIGINALE ###\r\n                        # ESEGUO LA QUERY INDICATA E NE CALCOLO LA R-PRECISION CON R=10\r\n                        self.__eval_r_recall_query(query, relevant_results, n_results)\r\n                        ### FINE ZONA ORIGINALE ###\r\n\r\n                        # Inizializzo il dizionario dei risultati rilevanti alla nuova query\r\n                        relevant_results = dict()\r\n                        # Ricavo il titolo della nuova query\r\n                        query = clean_line[3:-4]\r\n                    # Se la riga ottenuta dal file non è una query la inserisco tra i risultati rilevanti alla query\r\n                    elif relevant_results is not None:\r\n                        relevant_results[\"\".join([c if c != \"_\" else \" \" for c in clean_line])] = True\r\n            self.__eval_r_recall_query(query, relevant_results, n_results)\r\n            return self.__r_recall\r\n\r\n    def __eval_r_recall_query(self, query, relevant_results=None, n_results=100):\r\n        if query is not None:\r\n            recalled = 0\r\n            results = self.__searcher.commit_query(query, n_results)\r\n            for res in results[:10]:\r\n                if relevant_results.get(res['title']) is not None:\r\n                    recalled += 1\r\n            self.__r_recall[query] = (recalled / 10)\r\n\r\n    def __eval_query(self, query, relevant_results=None, n_results=100):\r\n        # Eseguo l'operazione soltanto se la query non è nulla\r\n        if query is not None:\r\n            # Eseguo la query indicata\r\n            results = self.__searcher.commit_query(query, n_results)\r\n            # Inizializzo la lista della precision a \"n\" livelli di recall per la query indicata\r\n            self.__precision_recall_dict[query] = []\r\n\r\n            for res in results:\r\n                # Controllo la rilevanza di ogni risultato\r\n                if relevant_results is not None and relevant_results.get(res['title']) is not None:\r\n                    relevant_results.pop(res['title'])\r\n                    # Se un risultato è rilevante aggiungo un valore di precision alla lista\r\n                    # precision = Numero_risultati_rilevanti_recuperati/Posizione_risultato_rilevante_attuale\r\n                    self.__precision_recall_dict[query]. \\\r\n                        append((len(self.__precision_recall_dict[query]) + 1) / (res.rank + 1))\r\n\r\n                    if len(relevant_results) < 1:\r\n                        break\r\n\r\n            print(query)\r\n            print(relevant_results)\r\n\r\n\r\ndef get_dict_nth_key(dictionary, n=0):\r\n    if n < 0:\r\n        n += len(dictionary)\r\n    for i, key in enumerate(dictionary.keys()):\r\n        if i == n:\r\n            return key\r\n    raise IndexError(\"Dictionary index out of range\")\r\n\r\n\r\ndef get_dict_nth_value(dictionary, n=0):\r\n    if n < 0:\r\n        n += len(dictionary)\r\n    for i, value in enumerate(dictionary.values()):\r\n        if i == n:\r\n            return value\r\n    raise IndexError(\"Dictionary index out of range\")\r\n\r\n\r\ndef sort_dict(dictionary, revers=False):\r\n    return {k: v for k, v in sorted(dictionary.items(), key=lambda item: item[1], reverse=revers)}\r\n\r\ndef sort_dict_in_same_order_of_another(dictionary_original, dictionary_unordered):\r\n    if dictionary_original.__len__() != dictionary_unordered.__len__():\r\n        raise IndexError(\"Dictionaries must have the same number of items\")\r\n    else:\r\n        new_dict = {}\r\n        for key in dictionary_original:\r\n            new_dict[key] = dictionary_unordered[key]\r\n        return new_dict\r\n\r\n\r\nclass WikiEvaluatorPrinter:\r\n\r\n    def __init__(self):\r\n        self.__evaluator = WikiEvaluator()\r\n        self.__precision_queries_dict = self.__evaluator.precision_at_recall_levels(1147)\r\n        self.__avg_precision_dict = self.__evaluator.average_precision(1147)\r\n        self.__mean_avg_precision = self.__evaluator.mean_average_precision()\r\n        self.__mean_precision_for_level_list = self.__evaluator.mean_precision_for_rec_level(1147)\r\n        self.__stdev_for_level_list = self.__evaluator.precision_stdev_for_level(1147)\r\n        self.__stedv_average_precision = stdev(self.__evaluator.average_precision(1147).values())\r\n        self.__r_recall_dict = self.__evaluator.r_recall(1147)\r\n\r\n        # sort del dizionario con i valori di recall\r\n        self.__r_recall_dict = sort_dict(self.__r_recall_dict, True)\r\n\r\n        # strutture dati per eventuale import\r\n        self.__imported_precision_queries_dict = None\r\n        self.__imported_avg_precision_dict = None\r\n        self.__imported_mean_avg_precision = None\r\n        self.__imported_mean_precision_for_level_list = None\r\n        self.__imported_stdev_for_level_list = None\r\n        self.__imported_stedv_average_precision = None\r\n        self.__imported_r_recall_dict = None\r\n\r\n    # scrittura su file csv dei valori di precision per le query; i file cvs vengono memorizzati in una\r\n    # cartella data e sono nominati col timestamp di generazione\r\n    def csv_write_precision_at_recall_levels(self, res_dir=\"Test_evaluation_output\", description=\"\"):\r\n        try:\r\n            assert type(res_dir) is str\r\n        except AssertionError:\r\n            raise TypeError\r\n\r\n        try:\r\n            assert res_dir != \"\"\r\n        except AssertionError:\r\n            raise ValueError\r\n\r\n        if not path.exists(res_dir):\r\n            mkdir(res_dir)\r\n\r\n        dt_string = datetime.now().strftime(\"%Y-%m-%d_%H.%M.%S\")\r\n        if description is not None and description != \"\":\r\n            description = f\"{description} - \"\r\n\r\n        file_name = f\"{dt_string} {description}Precision_At_Recall_Levels.csv\"\r\n        file_with_path = path.join(path.dirname(__file__), res_dir, f\"{file_name}\")\r\n\r\n        with open(file_with_path, \"w\") as out_file:\r\n            out_file.write(\"\\\"Query\\\";\\\"0.1\\\";\\\"0.2\\\";\\\"0.3\\\";\\\"0.4\\\";\\\"0.5\\\";\\\"0.6\\\";\\\"0.7\\\";\\\"0.8\\\";\\\"0.9\\\";\\\"1\"\r\n                           \"\\\";\\\"Relevant results retrieved\\\";\\\"AVG Precision\\\"\\n\")\r\n\r\n            for key, value in self.__precision_queries_dict.items():\r\n                out_file.write(f\"\\\"{key}\\\";\")\r\n\r\n                # scrivo le percentuali di precision\r\n                for v_value in value:\r\n                    out_file.write(f\"\\\"{v_value}\\\";\")\r\n\r\n                # se ci sono meno di 10 risultati rilevanti, metto i restanti livelli a 0\r\n                i = 0\r\n                while len(value) + i < 10:\r\n                    out_file.write(\"\\\"0\\\";\")\r\n                    i += 1\r\n\r\n                out_file.write(f\"\\\"{len(value)}\\\";\\\"{self.__avg_precision_dict[key]}\\\"\\n\")\r\n\r\n    # stampa console dei di precision per le query ecc\r\n    def console_write_results(self):\r\n        for key, value in self.__precision_queries_dict.items():\r\n            print(f\"{key}: {value}\\nRelevant results retrieved: {len(value)}\")\r\n            print(f\"Avg precision for {key}: {self.__avg_precision_dict[key]}\\n\")\r\n\r\n        print(f\"\\nMean Average Precision: {self.__mean_avg_precision}\\n\")\r\n        print(f\"Precision media per livello: {self.__mean_precision_for_level_list}\\n\"\r\n              f\"Deviazione standard  per livello: {self.__stdev_for_level_list}\\n\"\r\n              f\"Deviazione standard average precision: {self.__stedv_average_precision}\")\r\n\r\n        print(f\"\\n{self.__evaluator.r_recall(1147)}\")\r\n\r\n    # scrittura su file di tutti i valori calcolati dall'evaluation. Si utilizza un dizionario per rendere più facile\r\n    # la successiva importazione\r\n    def export_evaluation_data(self, res_dir=\"Test_evaluation_output\", description=\"\"):\r\n        try:\r\n            assert type(res_dir) is str\r\n        except AssertionError:\r\n            raise TypeError\r\n\r\n        try:\r\n            assert res_dir != \"\"\r\n        except AssertionError:\r\n            raise ValueError\r\n\r\n        if not path.exists(res_dir):\r\n            mkdir(res_dir)\r\n\r\n        # creazione file di output\r\n        dt_string = datetime.now().strftime(\"%Y-%m-%d_%H.%M.%S\")\r\n        if description is not None and description != \"\":\r\n            description = f\"{description} - \"\r\n\r\n        file_name = f\"{dt_string} {description}Data Export.dat\"\r\n        file_with_path = path.join(path.dirname(__file__), res_dir, f\"{file_name}\")\r\n\r\n        # creazione dizionario per export\r\n        data = {'precision_queries_dict': self.__precision_queries_dict,\r\n                'avg_precision_dict': self.__avg_precision_dict,\r\n                'mean_avg_precision': self.__mean_avg_precision,\r\n                'mean_precision_for_level_list': self.__mean_precision_for_level_list,\r\n                'stdev_for_level_list': self.__stdev_for_level_list,\r\n                'stedv_average_precision': self.__stedv_average_precision,\r\n                'r_recall_dict': self.__r_recall_dict}\r\n\r\n        with open(file_with_path, \"wb\") as out_file:\r\n            pickle.dump(data, out_file)\r\n\r\n        print(\"\\nDATA EXPORTED SUCCESSFULLY\")\r\n\r\n    # impott da file di tutti i valori calcolati dall'evaluation\r\n    def import_evaluation_data(self, file_name, res_dir=\"Test_evaluation_output\", description=\"\"):\r\n        file_with_path = path.join(path.dirname(__file__), res_dir, f\"{file_name}\")\r\n\r\n        with open(file_with_path, \"rb\") as in_file:\r\n            data = pickle.load(in_file)\r\n\r\n        self.__imported_precision_queries_dict = data['precision_queries_dict']\r\n        self.__imported_avg_precision_dict = data['avg_precision_dict']\r\n        self.__imported_mean_avg_precision = data['mean_avg_precision']\r\n        self.__imported_mean_precision_for_level_list = data['mean_precision_for_level_list']\r\n        self.__imported_stdev_for_level_list = data['stdev_for_level_list']\r\n        self.__imported_stedv_average_precision = data['stedv_average_precision']\r\n        self.__imported_r_recall_dict = data['r_recall_dict']\r\n\r\n        print(\"\\nDATA IMPORTED SUCCESSFULLY\")\r\n\r\n    # stampa il grafico di una query identificata dal query number (0-29)\r\n    def plot_graph_of_query_precision_levels(self, query_number=0, compare_with_imported_data=False):\r\n        try:\r\n            assert 0 <= query_number < 30\r\n        except AssertionError:\r\n            raise ValueError\r\n\r\n        query_name = get_dict_nth_key(self.__precision_queries_dict, query_number)\r\n        # estraggo i punti per gli assi\r\n        x_points = np.linspace(0.1, 1, 10)\r\n        y_precision_standard = get_dict_nth_value(self.__precision_queries_dict, query_number)\r\n        # y_precision_media_livello = self.__mean_precision_for_level_list\r\n        # y_upper_deviazione_standard_livello = []\r\n        # y_lower_deviazione_standard_livello = []\r\n\r\n        #for i in range(min(len(self.__stdev_for_level_list), len(self.__mean_precision_for_level_list))):\r\n            #    mean = self.__mean_precision_for_level_list[i]\r\n            #    st_dev = self.__stdev_for_level_list[i]\r\n            #    y_upper_deviazione_standard_livello.append(mean + st_dev)\r\n        #    y_lower_deviazione_standard_livello.append(mean - st_dev)\r\n\r\n        # in caso nella precision standard vi siano meno di 10 elementi, metto gli altri a zero\r\n        if len(y_precision_standard) < 10:\r\n            for _ in range(10 - len(y_precision_standard)):\r\n                y_precision_standard.append(0)\r\n\r\n        # calcolo nuovamente la media per livello escludendo il valore della query in questione\r\n        y_precision_media_livello = [(self.__mean_precision_for_level_list[i] * 30 - y_precision_standard[i]) / 29\r\n                                     for i in range(10)]\r\n\r\n        plt.plot(x_points, y_precision_standard, '-', label=\"Precision\")  # precision \"standard\"\r\n        plt.plot(x_points, y_precision_media_livello, '-', label=f\"Precision Media senza {query_name}\")  # precision media per livello\r\n        # plt.plot(x_points, y_upper_deviazione_standard_livello, 'r:', label=\"Deviazione Standard\")  # deviazione standard livello\r\n        # plt.plot(x_points, y_lower_deviazione_standard_livello, 'r:')\r\n        # plt.plot(x_points, self.__mean_precision_for_level_list, '-', label=\"Precision Media Completa\")  # precision media per livello\r\n\r\n        # eventuale caricamento e stampa dei dati importati\r\n        if compare_with_imported_data:\r\n            y_imported_precision_standard = get_dict_nth_value(self.__imported_precision_queries_dict, query_number)\r\n\r\n            if len(y_imported_precision_standard) < 10:\r\n                for _ in range(10 - len(y_imported_precision_standard)):\r\n                    y_imported_precision_standard.append(0)\r\n\r\n            y_imported_precision_media_livello = [(self.__imported_mean_precision_for_level_list[i] * 30 -\r\n                                                   y_imported_precision_standard[i]) / 29 for i in range(10)]\r\n\r\n            plt.plot(x_points, y_imported_precision_standard, ':', label=\"Precision Precedente\")  # precision \"standard\"\r\n            plt.plot(x_points, y_imported_precision_media_livello, ':',\r\n                     label=f\"Precision Media Precedente senza {query_name}\")  # precision media per livello\r\n\r\n        plt.legend()\r\n        plt.xlabel(\"Recall\")\r\n        plt.ylabel(\"Precision\")\r\n        plt.title(query_name)\r\n\r\n        plt.xticks(np.arange(0.1, 1.1, 0.1))\r\n        plt.grid(color='#CCCCCC')\r\n\r\n        plt.show()\r\n\r\n    # stampa il grafico della avg precision confrontato alla map\r\n    def plot_graph_of_queries_avg_precision_vs_map(self, compare_with_imported_data=False):\r\n\r\n        x_dict = dict(self.__avg_precision_dict)\r\n        x_dict['MEAN AVERAGE PRECISION'] = self.__mean_avg_precision\r\n        x_dict = sort_dict(x_dict, True)\r\n\r\n        deviazione_standard = stdev(self.__avg_precision_dict.values())\r\n        upperstdev = self.__mean_avg_precision + deviazione_standard\r\n        lowerstdev = self.__mean_avg_precision - deviazione_standard\r\n\r\n        x_points = list(range(1, len(x_dict) + 1))\r\n        y_bar_heights = []\r\n        bar_labels = []\r\n        y_man_points = []\r\n        y_up_stedev_points = []\r\n        y_low_stedev_points = []\r\n\r\n        # popolamento delle altezze delle barre e delle rispettive labels\r\n        for key, value in x_dict.items():\r\n            bar_labels.append(key)\r\n            y_bar_heights.append(value)\r\n\r\n        # popolamento della lista dei punti in y per la man (tutti uguali)\r\n        for _ in range(1, len(x_dict) + 1):\r\n            y_man_points.append(self.__mean_avg_precision)\r\n\r\n        # popolamento della lista dei punti in y per la up stedev (tutti uguali)\r\n        for _ in range(1, len(x_dict) + 1):\r\n            y_up_stedev_points.append(upperstdev)\r\n\r\n        # popolamento della lista dei punti in y per la low stdev (tutti uguali)\r\n        for _ in range(1, len(x_dict) + 1):\r\n            y_low_stedev_points.append(lowerstdev)\r\n\r\n        if not compare_with_imported_data:\r\n            bar_list = plt.bar(x_points, y_bar_heights, width=0.8, color=['orange'])\r\n            plt.plot(x_points, y_man_points, 'r:', label=\"Mean Average Precision\", linewidth=2)  # precision \"standard\"\r\n            bar_list[bar_labels.index('MEAN AVERAGE PRECISION')].set_color('r')  # coloro la barra della man\r\n\r\n            plt.plot(x_points, y_up_stedev_points, 'g:', label=\"Standard Deviation\", linewidth=2)  # upper stdev\r\n            plt.plot(x_points, y_low_stedev_points, 'g:', linewidth=2)  # upper stdev\r\n        else:\r\n            x_imported_dict = dict(self.__imported_avg_precision_dict)\r\n            x_imported_dict['MEAN AVERAGE PRECISION'] = self.__imported_mean_avg_precision\r\n            x_imported_dict = sort_dict_in_same_order_of_another(x_dict, x_imported_dict)\r\n\r\n            y_imported_bar_heights = []\r\n            y_imported_man_points = []\r\n\r\n            # popolamento delle altezze delle barre e delle rispettive labels\r\n            for key, value in x_imported_dict.items():\r\n                y_imported_bar_heights.append(value)\r\n\r\n            # popolamento della lista dei punti in y per la man (tutti uguali)\r\n            for _ in range(1, (len(x_imported_dict) + 1) * 2):\r\n                y_imported_man_points.append(self.__imported_mean_avg_precision)\r\n\r\n            # popolamento della lista dei punti in y per la man (tutti uguali)\r\n            y_man_points = []\r\n            for _ in range(1, (len(x_dict) + 1) * 2):\r\n                y_man_points.append(self.__mean_avg_precision)\r\n\r\n            x_points = list(range(1, (len(x_dict)) * 2 + 1, 2))\r\n            x_imported_points = list(range(2, (len(x_dict) + 1) * 2, 2))\r\n\r\n            bar_list = plt.bar(x_points, y_bar_heights, width=0.8, color=['orange'])\r\n            plt.plot(list(range(1, (len(x_dict) + 1) * 2)), y_man_points, 'r:', label=\"Mean Average Precision\", linewidth=2)  # precision \"standard\"\r\n            bar_list[bar_labels.index('MEAN AVERAGE PRECISION')].set_color('r')  # coloro la barra della man\r\n\r\n            imported_bar_list = plt.bar(x_imported_points, y_imported_bar_heights, width=-0.8,  align='edge', color=['#0277BD'])\r\n            plt.plot(list(range(1, (len(x_dict) + 1) * 2)), y_imported_man_points, 'b:', label=\"Mean Average Precision Precedente\",\r\n                     linewidth=1)  # precision \"standard\"\r\n            imported_bar_list[bar_labels.index('MEAN AVERAGE PRECISION')].set_color('b')  # coloro la barra della man\r\n\r\n\r\n        plt.legend()\r\n        plt.xticks(x_points, bar_labels, rotation='vertical')\r\n        plt.ylabel(\"Precision\")\r\n        plt.title(\"Queries\\' Average Precision vs Mean Average Precision\")\r\n\r\n        plt.show()\r\n\r\n    # stampa il grafico delle r recall confrontato alla media delle r recall\r\n    def plot_graph_of_queries_rrecall_vs_avg_recall(self, compare_with_imported_data=False):\r\n\r\n        x_dict = dict(self.__r_recall_dict)\r\n        avg_recall = mean(self.__r_recall_dict[k] for k in self.__r_recall_dict)\r\n        x_dict['AVERAGE 11-RECALL'] = avg_recall\r\n        x_dict = sort_dict(x_dict, True)\r\n\r\n        deviazione_standard = stdev(self.__r_recall_dict.values())\r\n        upperstdev = avg_recall + deviazione_standard\r\n        lowerstdev = avg_recall - deviazione_standard\r\n\r\n        x_points = list(range(1, len(x_dict) + 1))\r\n        y_bar_heights = []\r\n        bar_labels = []\r\n        y_avg_points = []\r\n        y_up_stedev_points = []\r\n        y_low_stedev_points = []\r\n\r\n        # popolamento delle altezze delle barre e delle rispettive labels\r\n        for key, value in x_dict.items():\r\n            bar_labels.append(key)\r\n            y_bar_heights.append(value)\r\n\r\n        # popolamento della lista dei punti in y per la man (tutti uguali)\r\n        for _ in range(1, len(x_dict) + 1):\r\n            y_avg_points.append(avg_recall)\r\n\r\n        # popolamento della lista dei punti in y per la up stedev (tutti uguali)\r\n        for _ in range(1, len(x_dict) + 1):\r\n            y_up_stedev_points.append(upperstdev)\r\n\r\n        # popolamento della lista dei punti in y per la low stdev (tutti uguali)\r\n        for _ in range(1, len(x_dict) + 1):\r\n            y_low_stedev_points.append(lowerstdev)\r\n\r\n        if not compare_with_imported_data:\r\n            bar_list = plt.bar(x_points, y_bar_heights, width=0.8, color=['orange'])\r\n            plt.plot(x_points, y_avg_points, 'r:', label=\"Average Recall\", linewidth=2)\r\n            bar_list[bar_labels.index('AVERAGE 11-RECALL')].set_color('r')  # coloro la barra della avg\r\n            plt.plot(x_points, y_up_stedev_points, 'g:', label=\"Standard Deviation\", linewidth=2)  # upper stdev\r\n            plt.plot(x_points, y_low_stedev_points, 'g:', linewidth=2)  # upper stdev\r\n        else:\r\n            x_imported_dict = dict(self.__imported_r_recall_dict)\r\n            imported_avg_recall = mean(self.__imported_r_recall_dict[k] for k in self.__imported_r_recall_dict)\r\n            x_imported_dict['AVERAGE 11-RECALL'] = imported_avg_recall\r\n            x_imported_dict = sort_dict_in_same_order_of_another(x_dict, x_imported_dict)\r\n\r\n            y_imported_bar_heights = []\r\n            y_imported_avg_points = []\r\n\r\n            x_points = list(range(1, (len(x_dict)) * 2 + 1, 2))\r\n            x_imported_points = list(range(2, (len(x_dict) + 1) * 2, 2))\r\n\r\n            # popolamento delle altezze delle barre e delle rispettive labels\r\n            for key, value in x_imported_dict.items():\r\n                y_imported_bar_heights.append(value)\r\n\r\n            # popolamento della lista dei punti in y per la man (tutti uguali)\r\n            for _ in range(1, (len(x_imported_dict) + 1) * 2):\r\n                y_imported_avg_points.append(imported_avg_recall)\r\n\r\n            # popolamento della lista dei punti in y per la man (tutti uguali)\r\n            y_avg_points = []\r\n            for _ in range(1, (len(x_imported_dict) + 1) * 2):\r\n                y_avg_points.append(avg_recall)\r\n\r\n            bar_list = plt.bar(x_points, y_bar_heights, width=0.8, color=['orange'])\r\n            plt.plot(list(range(1, (len(x_dict) + 1) * 2)), y_avg_points, 'r:', label=\"Average Recall\", linewidth=2)\r\n            bar_list[bar_labels.index('AVERAGE 11-RECALL')].set_color('r')  # coloro la barra della avg\r\n\r\n            imported_bar_list = plt.bar(x_imported_points, y_imported_bar_heights, width=-0.8, align='edge',\r\n                                        color=['#0277BD'])\r\n            plt.plot(list(range(1, (len(x_dict) + 1) * 2)), y_imported_avg_points, 'b:',\r\n                     label=\"Average Recall Precedente\",\r\n                     linewidth=1)  # precision \"standard\"\r\n            imported_bar_list[bar_labels.index('AVERAGE 11-RECALL')].set_color('b')  # coloro la barra della man\r\n\r\n\r\n        plt.legend()\r\n        plt.xticks(x_points, bar_labels, rotation='vertical')\r\n        plt.ylabel(\"R Recall\")\r\n        plt.title(\"Queries\\' 11 Recall vs Average 11-Recall\")\r\n\r\n        plt.show()\r\n\r\n\r\nwiki_printer = WikiEvaluatorPrinter()\r\nwiki_printer.csv_write_precision_at_recall_levels(description=\"3b_Word Sense Disambiguation V1\")\r\nwiki_printer.export_evaluation_data(description=\"3b_Word Sense Disambiguation V1\")\r\n# wiki_printer.console_write_results()\r\n\r\nwiki_printer.import_evaluation_data(\"2020-06-03_03.11.00 2_Stemming - Data Export.dat\")\r\nwiki_printer.plot_graph_of_query_precision_levels(2, True)\r\nwiki_printer.plot_graph_of_query_precision_levels(14, True)\r\nwiki_printer.plot_graph_of_query_precision_levels(13, True)\r\nwiki_printer.plot_graph_of_queries_avg_precision_vs_map(True)\r\nwiki_printer.plot_graph_of_queries_rrecall_vs_avg_recall(True)\r\nwiki_printer.plot_graph_of_queries_avg_precision_vs_map()\r\nwiki_printer.plot_graph_of_queries_rrecall_vs_avg_recall()\r\n#wiki_printer.plot_graph_of_query_precision_levels(14)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- evaluation.py	(revision 7c2fd5f78173f6d5c53cd97499083b930d94242b)
+++ evaluation.py	(date 1591956872498)
@@ -615,14 +615,14 @@
 
 
 wiki_printer = WikiEvaluatorPrinter()
-wiki_printer.csv_write_precision_at_recall_levels(description="3b_Word Sense Disambiguation V1")
-wiki_printer.export_evaluation_data(description="3b_Word Sense Disambiguation V1")
+#wiki_printer.csv_write_precision_at_recall_levels(description="3b_Word Sense Disambiguation V1")
+#wiki_printer.export_evaluation_data(description="3b_Word Sense Disambiguation V1")
 # wiki_printer.console_write_results()
 
 wiki_printer.import_evaluation_data("2020-06-03_03.11.00 2_Stemming - Data Export.dat")
-wiki_printer.plot_graph_of_query_precision_levels(2, True)
+wiki_printer.plot_graph_of_query_precision_levels(1, True)
 wiki_printer.plot_graph_of_query_precision_levels(14, True)
-wiki_printer.plot_graph_of_query_precision_levels(13, True)
+wiki_printer.plot_graph_of_query_precision_levels(19, True)
 wiki_printer.plot_graph_of_queries_avg_precision_vs_map(True)
 wiki_printer.plot_graph_of_queries_rrecall_vs_avg_recall(True)
 wiki_printer.plot_graph_of_queries_avg_precision_vs_map()
