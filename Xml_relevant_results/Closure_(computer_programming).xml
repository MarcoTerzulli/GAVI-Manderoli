<mediawiki xmlns="http://www.mediawiki.org/xml/export-0.10/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mediawiki.org/xml/export-0.10/ http://www.mediawiki.org/xml/export-0.10.xsd" version="0.10" xml:lang="en">
  <siteinfo>
    <sitename>Wikipedia</sitename>
    <dbname>enwiki</dbname>
    <base>https://en.wikipedia.org/wiki/Main_Page</base>
    <generator>MediaWiki 1.35.0-wmf.31</generator>
    <case>first-letter</case>
    <namespaces>
      <namespace key="-2" case="first-letter">Media</namespace>
      <namespace key="-1" case="first-letter">Special</namespace>
      <namespace key="0" case="first-letter" />
      <namespace key="1" case="first-letter">Talk</namespace>
      <namespace key="2" case="first-letter">User</namespace>
      <namespace key="3" case="first-letter">User talk</namespace>
      <namespace key="4" case="first-letter">Wikipedia</namespace>
      <namespace key="5" case="first-letter">Wikipedia talk</namespace>
      <namespace key="6" case="first-letter">File</namespace>
      <namespace key="7" case="first-letter">File talk</namespace>
      <namespace key="8" case="first-letter">MediaWiki</namespace>
      <namespace key="9" case="first-letter">MediaWiki talk</namespace>
      <namespace key="10" case="first-letter">Template</namespace>
      <namespace key="11" case="first-letter">Template talk</namespace>
      <namespace key="12" case="first-letter">Help</namespace>
      <namespace key="13" case="first-letter">Help talk</namespace>
      <namespace key="14" case="first-letter">Category</namespace>
      <namespace key="15" case="first-letter">Category talk</namespace>
      <namespace key="100" case="first-letter">Portal</namespace>
      <namespace key="101" case="first-letter">Portal talk</namespace>
      <namespace key="108" case="first-letter">Book</namespace>
      <namespace key="109" case="first-letter">Book talk</namespace>
      <namespace key="118" case="first-letter">Draft</namespace>
      <namespace key="119" case="first-letter">Draft talk</namespace>
      <namespace key="446" case="first-letter">Education Program</namespace>
      <namespace key="447" case="first-letter">Education Program talk</namespace>
      <namespace key="710" case="first-letter">TimedText</namespace>
      <namespace key="711" case="first-letter">TimedText talk</namespace>
      <namespace key="828" case="first-letter">Module</namespace>
      <namespace key="829" case="first-letter">Module talk</namespace>
      <namespace key="2300" case="first-letter">Gadget</namespace>
      <namespace key="2301" case="first-letter">Gadget talk</namespace>
      <namespace key="2302" case="case-sensitive">Gadget definition</namespace>
      <namespace key="2303" case="case-sensitive">Gadget definition talk</namespace>
    </namespaces>
  </siteinfo>
  <page>
    <title>Closure (computer programming)</title>
    <ns>0</ns>
    <id>62319</id>
    <revision>
      <id>957046588</id>
      <parentid>952525376</parentid>
      <timestamp>2020-05-16T18:29:16Z</timestamp>
      <contributor>
        <username>Btyner</username>
        <id>185327</id>
      </contributor>
      <comment>/* Callbacks (C) */ wikify 'type safe'</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="48383" xml:space="preserve">{{other uses|Closure (mathematics)|Closure (disambiguation)}}
{{distinguish|text=the programming language [[Clojure]]}}
In [[programming language]]s, a '''closure''', also '''lexical closure''' or '''function closure''', is a technique for implementing [[lexically scoped]] [[name binding]] in a language with [[first-class function]]s. [[Operational semantics|Operationally]], a closure is a [[record (computer science)|record]] storing a [[function (computer science)|function]]{{efn|The function may be stored as a [[reference (computer science)|reference]] to a function, such as a [[function pointer]].}} together with an environment.&lt;ref&gt;Sussman and Steele. "Scheme: An interpreter for extended lambda calculus". "... a data structure containing a lambda expression, and an environment to be used when that lambda expression is applied to arguments." ([[s:Page:Scheme - An interpreter for extended lambda calculus.djvu/22|Wikisource]])&lt;/ref&gt; The environment is a mapping associating each [[free variable]] of the function (variables that are used locally, but defined in an enclosing scope) with the [[value (computer science)|value]] or [[Reference (computer science)|reference]] to which the name was bound when the closure was created.{{efn|These names most frequently refer to values, mutable variables, or functions, but can also be other entities such as constants, types, classes, or labels.}} Unlike a plain function, a closure allows the function to access those ''captured variables'' through the closure's copies of their values or references, even when the function is invoked outside their scope.

== History and etymology ==
The concept of closures was developed in the 1960s for the mechanical evaluation of expressions in the [[&amp;lambda;-calculus]] and was first fully implemented in 1970 as a language feature in the [[Rpal|PAL]] programming language to support lexically scoped [[first-class function]]s.&lt;ref name=dat2012&gt;[[David A. Turner]] (2012). [http://www.cs.kent.ac.uk/people/staff/dat/tfp12/tfp12.pdf "Some History of Functional Programming Languages"]. Trends in Functional Programming '12.&lt;/ref&gt;{{rp|Turner's section 2, note 8 contains his claim about M-expressions}}

[[Peter J. Landin]] defined the term ''closure'' in 1964 as having an ''environment part'' and a ''control part'' as used by his [[SECD machine]] for evaluating expressions.&lt;ref name=landin&gt;{{citation
| author = P. J. Landin | year = 1964 | title = The mechanical evaluation of expressions | author-link = Peter J. Landin }}&lt;/ref&gt; [[Joel Moses]] credits Landin with introducing the term ''closure'' to refer to a [[Anonymous function|lambda expression]] whose open bindings (free variables) have been closed by (or bound in) the lexical environment, resulting in a ''closed expression'', or closure.&lt;ref&gt;{{citation
| author = Joel Moses |date=June 1970 | title = The Function of FUNCTION in LISP, or Why the FUNARG Problem Should Be Called the Environment Problem | id = [[AI Memo]] 199| quote = A useful metaphor for the difference between FUNCTION and QUOTE in LISP is to think of QUOTE as a porous or an open covering of the function since free variables escape to the current environment. FUNCTION acts as a closed or nonporous covering (hence the term "closure" used by Landin). Thus we talk of "open" Lambda expressions (functions in LISP are usually Lambda expressions) and "closed" Lambda expressions. [...] My interest in the environment problem began while Landin, who had a deep understanding of the problem, visited MIT during 1966-67. I then realized the correspondence between the FUNARG lists which are the results of the evaluation of "closed" Lambda expressions in [[LISP 1.5|LISP]] and [[ISWIM]]'s Lambda Closures.|hdl=1721.1/5854 |author-link=Joel Moses }}&lt;/ref&gt;&lt;ref&gt;{{cite book| author = Åke Wikström| year = 1987| title = Functional Programming using Standard ML| isbn = 0-13-331968-7| quote = The reason it is called a "closure" is that an expression containing free variables is called an "open" expression, and by associating to it the bindings of its free variables, you close it.| author-link = Åke Wikström}}&lt;/ref&gt; This usage was subsequently adopted by [[Gerald Jay Sussman|Sussman]] and [[Guy L. Steele, Jr.|Steele]] when they defined [[Scheme (programming language)|Scheme]] in 1975,&lt;ref&gt;{{citation| author = [[Gerald Jay Sussman]] and [[Guy L. Steele, Jr.]]|date=December 1975| title = Scheme: An Interpreter for the Extended Lambda Calculus| id = [[AI Memo]] 349}}&lt;/ref&gt; a lexically scoped variant of [[LISP]], and became widespread.

== Anonymous functions ==
{{further|Anonymous function}}
The term ''closure'' is often used as a synonym for [[anonymous function]], though strictly, an anonymous function is a function [[Literal (computer programming)|literal]] without a name, while a closure is an instance of a function, a [[Value (computer science)|value]], whose non-local variables have been bound either to values or to [[Variable (computer science)|storage locations]] (depending on the language; see the [[#Lexical environment|lexical environment]] section below).

For example, in the following [[Python (programming language)|Python]] code:
&lt;syntaxhighlight lang="python"&gt;
def f(x):
    def g(y):
        return x + y
    return g  # Return a closure.

def h(x):
    return lambda y: x + y  # Return a closure.

# Assigning specific closures to variables.
a = f(1)
b = h(1)

# Using the closures stored in variables.
assert a(5) == 6
assert b(5) == 6

# Using closures without binding them to variables first.
assert f(1)(5) == 6  # f(1) is the closure.
assert h(1)(5) == 6  # h(1) is the closure.
&lt;/syntaxhighlight&gt;
the values of &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; are closures, in both cases produced by returning a nested function with a free variable from the enclosing function, so that the free variable binds to the value of parameter &lt;code&gt;x&lt;/code&gt; of the enclosing function. The closures in &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; are functionally identical. The only difference in implementation is that in the first case we used a nested function with a name, &lt;code&gt;g&lt;/code&gt;, while in the second case we used an anonymous nested function (using the Python keyword &lt;code&gt;lambda&lt;/code&gt; for creating an anonymous function). The original name, if any, used in defining them is irrelevant. 

A closure is a value like any other value. It does not need to be assigned to a variable and can instead be used directly, as shown in the last two lines of the example. This usage may be deemed an "anonymous closure".

The nested function definitions are not themselves closures: they have a free variable which is not yet bound. Only once the enclosing function is evaluated with a value for the parameter is the free variable of the nested function bound, creating a closure, which is then returned from the enclosing function.

Lastly, a closure is only distinct from a function with free variables when outside of the scope of the non-local variables, otherwise the defining environment and the execution environment coincide and there is nothing to distinguish these (static and dynamic binding cannot be distinguished because the names resolve to the same values). For example, in the below program, functions with a free variable &lt;code&gt;x&lt;/code&gt; (bound to the non-local variable &lt;code&gt;x&lt;/code&gt; with global scope) are executed in the same environment where &lt;code&gt;x&lt;/code&gt; is defined, so it is immaterial whether these are actually closures:
&lt;syntaxhighlight lang="python"&gt;
x = 1
nums = [1, 2, 3]

def f(y):
    return x + y

map(f, nums)
map(lambda y: x + y, nums)
&lt;/syntaxhighlight&gt;
This is most often achieved by a function return, since the function must be defined within the scope of the non-local variables, in which case typically its own scope will be smaller.

This can also be achieved by [[variable shadowing]] (which reduces the scope of the non-local variable), though this is less common in practice, as it is less useful and shadowing is discouraged. In this example &lt;code&gt;f&lt;/code&gt; can be seen to be a closure because &lt;code&gt;x&lt;/code&gt; in the body of &lt;code&gt;f&lt;/code&gt; is bound to the &lt;code&gt;x&lt;/code&gt; in the global namespace, not the &lt;code&gt;x&lt;/code&gt; local to &lt;code&gt;g&lt;/code&gt;:
&lt;syntaxhighlight lang="python"&gt;
x = 0

def f(y):
    return x + y

def g(z):
    x = 1  # local x shadows global x
    return f(z)

g(1)  # evaluates to 1, not 2
&lt;/syntaxhighlight&gt;

== Applications ==
The use of closures is associated with languages where functions are [[first-class object]]s, in which functions can be returned as results from [[higher-order function]]s, or passed as arguments to other function calls; if functions with free variables are first-class, then returning one creates a closure. This includes [[functional programming languages]] such as [[Lisp (programming language)|Lisp]] and [[ML (programming language)|ML]], as well as many modern, multi-paradigm languages, such as [[Python (programming language)|Python]] and [[Rust (programming language)|Rust]]. Closures are also frequently used with [[Callback (computer programming)|callback]]s, particularly for [[event handler]]s, such as in [[JavaScript]], where they are used for interactions with a [[dynamic web page]].

Closures can also be used in a  [[continuation-passing style]] to [[information hiding|hide state]]. Constructs such as [[object (computer science)|object]]s and [[control structure]]s can thus be implemented with closures. In some languages, a closure may occur when a function is defined within another function, and the inner function refers to local variables of the outer function. At [[Run time (program lifecycle phase)|run-time]], when the outer function executes, a closure is formed, consisting of the inner function's code and references (the upvalues) to any variables of the outer function required by the closure.

=== First-class functions ===
{{further|First-class function}}
Closures typically appear in languages with [[first-class object|first-class functions]]—in other words, such languages enable functions to be passed as arguments, returned from function calls, bound to variable names, etc., just like simpler types such as strings and integers. For example, consider the following [[Scheme (programming language)|Scheme]] function:
&lt;syntaxhighlight lang="scheme"&gt;
; Return a list of all books with at least THRESHOLD copies sold.
(define (best-selling-books threshold)
  (filter
    (lambda (book)
      (&gt;= (book-sales book) threshold))
    book-list))
&lt;/syntaxhighlight&gt;

In this example, the [[Lambda (programming)|lambda expression]] &lt;code&gt;(lambda (book) (&gt;= (book-sales book) threshold))&lt;/code&gt; appears within the function &lt;code&gt;best-selling-books&lt;/code&gt;.  When the lambda expression is evaluated, Scheme creates a closure consisting of the code for the lambda expression and a reference to the &lt;code&gt;threshold&lt;/code&gt; variable, which is a [[free variable]] inside the lambda expression.

The closure is then passed to the &lt;code&gt;filter&lt;/code&gt; function, which calls it repeatedly to determine which books are to be added to the result list and which are to be discarded. Because the closure itself has a reference to &lt;code&gt;threshold&lt;/code&gt;, it can use that variable each time &lt;code&gt;filter&lt;/code&gt; calls it. The function &lt;code&gt;filter&lt;/code&gt; itself might be defined in a completely separate file.

Here is the same example rewritten in [[JavaScript]], another popular language with support for closures:
&lt;syntaxhighlight lang="javascript"&gt;
// Return a list of all books with at least 'threshold' copies sold.
function bestSellingBooks(threshold) {
  return bookList.filter(
      function (book) { return book.sales &gt;= threshold; }
    );
}
&lt;/syntaxhighlight&gt;

The &lt;code&gt;function&lt;/code&gt; keyword is used here instead of &lt;code&gt;lambda&lt;/code&gt;, and an &lt;code&gt;Array.filter&lt;/code&gt; method&lt;ref&gt;{{cite web | url = https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/Array/filter | title = array.filter | work = Mozilla Developer Center | date = 10 January 2010 | accessdate = 2010-02-09}}&lt;/ref&gt; instead of a global &lt;code&gt;filter&lt;/code&gt; function, but otherwise the structure and the effect of the code are the same.

A function may create a closure and return it, as in the following example:

&lt;syntaxhighlight lang="javascript"&gt;
// Return a function that approximates the derivative of f
// using an interval of dx, which should be appropriately small.
function derivative(f, dx) {
  return function (x) {
    return (f(x + dx) - f(x)) / dx;
  };
}
&lt;/syntaxhighlight&gt;

Because the closure in this case outlives the execution of the function that creates it, the variables &lt;code&gt;f&lt;/code&gt; and &lt;code&gt;dx&lt;/code&gt; live on after the function &lt;code&gt;derivative&lt;/code&gt; returns, even though execution has left their scope and they are no longer visible. In languages without closures, the lifetime of an automatic local variable coincides with the execution of the stack frame where that variable is declared. In languages with closures, variables must continue to exist as long as any existing closures have references to them. This is most commonly implemented using some form of [[garbage collection (computer science)|garbage collection]].

=== State representation ===
A closure can be used to associate a function with a set of "private" variables, which persist over several invocations of the function. The [[scope (programming)|scope]] of the variable encompasses only the closed-over function, so it cannot be accessed from other program code. These are analogous to [[private variable]]s in [[object-oriented programming]], and in fact closures are analogous to a type of [[Object (computer science)|object]], specifically [[function object]]s, with a single public method (function call), and possible many private variables (the bound variables).

In stateful languages, closures can thus be used to implement paradigms for state representation and [[information hiding]], since the closure's upvalues (its closed-over variables) are of indefinite [[variable (programming)#Scope and extent|extent]], so a value established in one invocation remains available in the next.  Closures used in this way no longer have [[referential transparency]], and are thus no longer [[pure function]]s; nevertheless, they are commonly used in impure functional languages such as [[Scheme (programming language)|Scheme]].

=== Other uses ===
Closures have many uses:
* Because closures delay evaluation—i.e., they do not "do" anything until they are called—they can be used to define control structures.  For example, all of [[Smalltalk]]'s standard control structures, including branches (if/then/else) and loops (while and for), are defined using objects whose methods accept closures.  Users can easily define their own control structures also.
* In languages which implement assignment, multiple functions can be produced that close over the same environment, enabling them to communicate privately by altering that environment. In Scheme:

&lt;syntaxhighlight lang="scheme"&gt;
(define foo #f)
(define bar #f)

(let ((secret-message "none"))
  (set! foo (lambda (msg) (set! secret-message msg)))
  (set! bar (lambda () secret-message)))

(display (bar)) ; prints "none"
(newline)
(foo "meet me by the docks at midnight")
(display (bar)) ; prints "meet me by the docks at midnight"
&lt;/syntaxhighlight&gt;

* Closures can be used to implement [[Object-oriented programming|object]] systems.&lt;ref&gt;{{cite web | url = http://okmij.org/ftp/Scheme/oop-in-fp.txt | title = Re: FP, OO and relations. Does anyone trump the others? | date = 29 December 1999 | accessdate = 2008-12-23}}&lt;/ref&gt;

Note: Some speakers call any data structure that binds a [[Scope (programming)#Lexical scoping|lexical]] environment a closure, but the term usually refers specifically to functions.

== Implementation and theory ==
Closures are typically implemented with a special [[data structure]] that contains a [[function pointer|pointer to the function code]], plus a representation of the function's lexical environment (i.e., the set of available variables) at the time when the closure was created. The referencing environment [[name binding|binds]] the non-local names to the corresponding variables in the lexical environment at the time the closure is created, additionally extending their lifetime to at least as long as the lifetime of the closure itself. When the closure is entered at a later time, possibly with a different lexical environment, the function is executed with its non-local variables referring to the ones captured by the closure, not the current environment.

A language implementation cannot easily support full closures if its run-time memory model allocates all [[automatic variable]]s on a linear [[Stack-based memory allocation|stack]]. In such languages, a function's automatic local variables are deallocated when the function returns. However, a closure requires that the free variables it references survive the enclosing function's execution. Therefore, those variables must be allocated so that they persist until no longer needed, typically via [[heap allocation]], rather than on the stack, and their lifetime must be managed so they survive until all closures referencing them are no longer in use.

This explains why, typically, languages that natively support closures also use [[Garbage collection (computer science)|garbage collection]]. The alternatives are manual memory management of non-local variables (explicitly allocating on the heap and freeing when done), or, if using stack allocation, for the language to accept that certain use cases will lead to [[undefined behaviour]], due to [[dangling pointer]]s to freed automatic variables, as in lambda expressions in C++11&lt;ref&gt;''[http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2550.pdf Lambda Expressions and Closures]'' C++ Standards Committee. 29 February 2008.&lt;/ref&gt; or nested functions in GNU C.&lt;ref&gt;GCC Manual, [https://gcc.gnu.org/onlinedocs/gcc/Nested-Functions.html 6.4 Nested Functions], "If you try to call the nested function through its address after the containing function exits, all hell breaks loose. If you try to call it after a containing scope level exits, and if it refers to some of the variables that are no longer in scope, you may be lucky, but it's not wise to take the risk. If, however, the nested function does not refer to anything that has gone out of scope, you should be safe."&lt;/ref&gt; The [[funarg problem]] (or "functional argument" problem) describes the difficulty of implementing functions as first class objects in a stack-based programming language such as C or C++. Similarly in [[D (programming language)|D]] version 1, it is assumed that the programmer knows what to do with [[delegation (programming)|delegates]] and automatic local variables, as their references will be invalid after return from its definition scope (automatic local variables are on the stack) – this still permits many useful functional patterns, but for complex cases needs explicit [[heap allocation]] for variables. D version 2 solved this by detecting which variables must be stored on the heap, and performs automatic allocation. Because D uses garbage collection, in both versions, there is no need to track usage of variables as they are passed.

In strict functional languages with immutable data (''e.g.'' [[Erlang (programming language)|Erlang]]), it is very easy to implement automatic memory management (garbage collection), as there are no possible cycles in variables' references. For example, in Erlang, all arguments and variables are allocated on the heap, but references to them are additionally stored on the stack. After a function returns, references are still valid. Heap cleaning is done by incremental garbage collector.

In ML, local variables are lexically scoped, and hence define a stack-like model, but since they are bound to values and not to objects, an implementation is free to copy these values into the closure's data structure in a way that is invisible to the programmer.

[[Scheme (programming language)|Scheme]], which has an [[ALGOL]]-like lexical scope system with dynamic variables and garbage collection, lacks a stack programming model and does not suffer from the limitations of stack-based languages. Closures are expressed naturally in Scheme. The lambda form encloses the code, and the free variables of its environment persist within the program as long as they can possibly be accessed, and so they can be used as freely as any other Scheme expression.{{citation needed|date=December 2014}}

Closures are closely related to Actors in the [[Actor model]] of concurrent computation where the values in the function's lexical environment are called ''acquaintances''. An important issue for closures in [[concurrent programming]] languages is whether the variables in a closure can be updated and, if so, how these updates can be synchronized. Actors provide one solution.&lt;ref&gt;''[https://dspace.mit.edu/handle/1721.1/6935 Foundations of Actor Semantics]'' Will Clinger. MIT Mathematics Doctoral Dissertation. June 1981.&lt;/ref&gt;

Closures are closely related to [[function object]]s; the transformation from the former to the latter is known as [[defunctionalization]] or [[lambda lifting]]; see also [[closure conversion]].{{Citation needed|date=September 2011}}

== Differences in semantics ==

=== Lexical environment ===
As different languages do not always have a common definition of the lexical environment, their definitions of closure may vary also. The commonly held minimalist definition of the lexical environment defines it as a set of all [[Name binding|bindings of variables]] in the scope, and that is also what closures in any language have to capture. However the meaning of a [[Variable (programming)|variable]] binding also differs. In imperative languages, variables bind to relative locations in memory that can store values.  Although the relative location of a binding does not change at runtime, the value in the bound location can. In such languages, since closure captures the binding, any operation on the variable, whether done from the closure or not, are performed on the same relative memory location. This is often called capturing the variable "by reference". Here is an example illustrating the concept in [[ECMAScript]], which is one such language:

&lt;syntaxhighlight lang="ecmascript"&gt;
// ECMAScript
var f, g;
function foo() {
  var x;
  f = function() { return ++x; };
  g = function() { return --x; };
  x = 1;
  alert('inside foo, call to f(): ' + f());
}
foo();  // 2
alert('call to g(): ' + g());  // 1 (--x)
alert('call to g(): ' + g());  // 0 (--x)
alert('call to f(): ' + f());  // 1 (++x)
alert('call to f(): ' + f());  // 2 (++x)
&lt;/syntaxhighlight&gt;

Function &lt;code&gt;foo&lt;/code&gt; and the closures referred to by variables &lt;code&gt;f&lt;/code&gt; and &lt;code&gt;g&lt;/code&gt; all use the same relative memory location signified by local variable &lt;code&gt;x&lt;/code&gt;.

In some instances the above behaviour may be undesirable, and it is necessary to bind a different lexical closure. Again in ECMAScript, this would be done using the &lt;code&gt;Function.bind()&lt;/code&gt;.

===Example 1: Reference to an unbound variable===
&lt;ref&gt;{{cite web |title=Function.prototype.bind() |url=https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Function/bind |website=MDN Web Docs |accessdate=20 November 2018}}&lt;/ref&gt;
&lt;syntaxhighlight lang="ecmascript"&gt;
var module = {
  x: 42,
  getX: function() {return this.x; }
}
var unboundGetX = module.getX;
console.log(unboundGetX()); // The function gets invoked at the global scope
// emits undefined as 'x' is not specified in global scope.

var boundGetX = unboundGetX.bind(module); // specify object module as the closure
console.log(boundGetX()); // emits 42
&lt;/syntaxhighlight&gt;

===Example 2: Accidental reference to a bound variable===

For this example the expected behaviour would be that each link should emit its id when clicked; but because the variable 'e' is bound the scope above, and lazy evaluated on click, what actually happens is that each on click event emits the id of the last element in 'elements' bound at the end of the for loop.&lt;ref&gt;{{cite web |title=Closures |url=https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures#Creating_closures_in_loops_A_common_mistake |website=MDN Web Docs |accessdate=20 November 2018}}&lt;/ref&gt;
&lt;syntaxhighlight lang="ecmascript"&gt;
var elements= document.getElementsByTagName('a');
//Incorrect: e is bound to the function containing the 'for' loop, not the closure of "handle"
for (var e in elements){ e.onclick=function handle(){ alert(e.id);} } 
&lt;/syntaxhighlight&gt;
Again here variable &lt;code&gt;e&lt;/code&gt; would need to be bound by the scope of the block using &lt;code&gt;handle.bind(this)&lt;/code&gt; or the &lt;code&gt;let&lt;/code&gt; keyword.

On the other hand, many functional languages, such as [[ML (programming language)|ML]], bind variables directly to values. In this case, since there is no way to change the value of the variable once it is bound, there is no need to share the state between closures—they just use the same values. This is often called capturing the variable "by value". Java's local and anonymous classes also fall into this category—they require captured local variables to be &lt;code&gt;final&lt;/code&gt;, which also means there is no need to share state.

Some languages enable you to choose between capturing the value of a variable or its location. For example, in C++11, captured variables are either declared with &lt;code&gt;[&amp;]&lt;/code&gt;, which means captured by reference, or with &lt;code&gt;[=]&lt;/code&gt;, which means captured by value.

Yet another subset, [[lazy evaluation|lazy]] functional languages such as [[Haskell (programming language)|Haskell]], bind variables to results of future computations rather than values. Consider this example in Haskell:

&lt;syntaxhighlight lang="haskell"&gt;
-- Haskell
foo :: Fractional a =&gt; a -&gt; a -&gt; (a -&gt; a)
foo x y = (\z -&gt; z + r)
          where r = x / y

f :: Fractional a =&gt; a -&gt; a
f = foo 1 0

main = print (f 123)
&lt;/syntaxhighlight&gt;

The binding of &lt;code&gt;r&lt;/code&gt; captured by the closure defined within function &lt;code&gt;foo&lt;/code&gt; is to the computation &lt;code&gt;(x / y)&lt;/code&gt;—which in this case results in division by zero. However, since it is the computation that is captured, and not the value, the error only manifests itself when the closure is invoked, and actually attempts to use the captured binding.

=== Closure leaving ===
Yet more differences manifest themselves in the behavior of other lexically scoped constructs, such as &lt;code&gt;return&lt;/code&gt;, &lt;code&gt;break&lt;/code&gt; and &lt;code&gt;continue&lt;/code&gt; statements. Such constructs can, in general, be considered in terms of invoking an [[escape continuation]] established by an enclosing control statement (in case of &lt;code&gt;break&lt;/code&gt; and &lt;code&gt;continue&lt;/code&gt;, such interpretation requires looping constructs to be considered in terms of recursive function calls). In some languages, such as ECMAScript, &lt;code&gt;return&lt;/code&gt; refers to the continuation established by the closure lexically innermost with respect to the statement—thus, a &lt;code&gt;return&lt;/code&gt; within a closure transfers control to the code that called it. However, in [[Smalltalk]], the superficially similar operator &lt;code&gt;^&lt;/code&gt; invokes the escape continuation established for the method invocation, ignoring the escape continuations of any intervening nested closures. The escape continuation of a particular closure can only be invoked in Smalltalk implicitly by reaching the end of the closure's code. The following examples in ECMAScript and Smalltalk highlight the difference:

&lt;syntaxhighlight lang="smalltalk"&gt;
"Smalltalk"
foo
  | xs |
  xs := #(1 2 3 4).
  xs do: [:x | ^x].
  ^0
bar
  Transcript show: (self foo printString) "prints 1"
&lt;/syntaxhighlight&gt;

&lt;syntaxhighlight lang="javascript"&gt;
// ECMAScript
function foo() {
  var xs = [1, 2, 3, 4];
  xs.forEach(function (x) { return x; });
  return 0;
}
alert(foo()); // prints 0
&lt;/syntaxhighlight&gt;

The above code snippets will behave differently because the Smalltalk &lt;code&gt;^&lt;/code&gt; operator and the JavaScript &lt;code&gt;return&lt;/code&gt; operator are not analogous.  In the ECMAScript example, &lt;code&gt;return x&lt;/code&gt; will leave the inner closure to begin a new iteration of the &lt;code&gt;forEach&lt;/code&gt; loop, whereas in the Smalltalk example, &lt;code&gt;^x&lt;/code&gt; will abort the loop and return from the method &lt;code&gt;foo&lt;/code&gt;.

[[Common Lisp]] provides a construct that can express either of the above actions: Lisp &lt;code&gt;(return-from foo x)&lt;/code&gt; behaves as [[Smalltalk]] &lt;code&gt;^x&lt;/code&gt;, while Lisp &lt;code&gt;(return-from nil x)&lt;/code&gt; behaves as [[JavaScript]] &lt;code&gt;return x&lt;/code&gt;. Hence, Smalltalk makes it possible for a captured escape continuation to outlive the extent in which it can be successfully invoked. Consider:

&lt;syntaxhighlight lang="smalltalk"&gt;
"Smalltalk"
foo
    ^[ :x | ^x ]
bar
    | f |
    f := self foo.
    f value: 123 "error!"
&lt;/syntaxhighlight&gt;

When the closure returned by the method &lt;code&gt;foo&lt;/code&gt; is invoked, it attempts to return a value from the invocation of &lt;code&gt;foo&lt;/code&gt; that created the closure. Since that call has already returned and the Smalltalk method invocation model does not follow the [[spaghetti stack]] discipline to facilitate multiple returns, this operation results in an error.

Some languages, such as [[Ruby (programming language)|Ruby]], enable the programmer to choose the way &lt;code&gt;return&lt;/code&gt; is captured. An example in Ruby:

&lt;syntaxhighlight lang="ruby"&gt;
# Ruby

# Closure using a Proc
def foo
  f = Proc.new { return "return from foo from inside proc" }
  f.call # control leaves foo here
  return "return from foo"
end

# Closure using a lambda
def bar
  f = lambda { return "return from lambda" }
  f.call # control does not leave bar here
  return "return from bar"
end

puts foo # prints "return from foo from inside proc"
puts bar # prints "return from bar"
&lt;/syntaxhighlight&gt;

Both &lt;code&gt;Proc.new&lt;/code&gt; and &lt;code&gt;lambda&lt;/code&gt; in this example are ways to create a closure, but semantics of the closures thus created are different with respect to the &lt;code&gt;return&lt;/code&gt; statement.

In [[Scheme (programming language)|Scheme]], definition and scope of the &lt;code&gt;return&lt;/code&gt; control statement is explicit (and only arbitrarily named 'return' for the sake of the example). The following is a direct translation of the Ruby sample.

&lt;syntaxhighlight lang="Scheme"&gt;
; Scheme
(define call/cc call-with-current-continuation)

(define (foo)
  (call/cc
   (lambda (return)
     (define (f) (return "return from foo from inside proc"))
     (f) ; control leaves foo here
     (return "return from foo"))))

(define (bar)
  (call/cc
   (lambda (return)
     (define (f) (call/cc (lambda (return) (return "return from lambda"))))
     (f) ; control does not leave bar here
     (return "return from bar"))))

(display (foo)) ; prints "return from foo from inside proc"
(newline)
(display (bar)) ; prints "return from bar"
&lt;/syntaxhighlight&gt;

== Closure-like constructs ==
Some languages have features which simulate the behavior of closures. In languages such as Java, C++, Objective-C, C#, VB.NET, and D, these features are the result of the language's object-oriented paradigm.

=== Callbacks (C) ===
Some [[C (programming language)|C]] libraries support 
[[callback (computer science)|callback]]s.  This is 
sometimes implemented by providing two values when 
registering the callback with the library: a function 
pointer and a separate &lt;code&gt;void*&lt;/code&gt; pointer to 
arbitrary data of the user's choice. When the library 
executes the callback function, it passes along the data 
pointer. This enables the callback to maintain state and 
to refer to information captured at the time it was 
registered with the library. The idiom is similar to 
closures in functionality, but not in syntax. The 
&lt;code&gt;void*&lt;/code&gt; pointer is not [[type safety|type safe]] so this C
idiom differs from type-safe closures in C#, Haskell or ML.

Callbacks are extensively used in GUI [[Widget toolkits]] to
implement [[Event-driven programming]] by associating general
functions of graphical widgets (menus, buttons, check boxes,
sliders, spinners, etc.) with application-specific functions
implementing the specific desired behavior for the application.

====Nested function and function pointer(C)====

With a gcc extension, a [https://gcc.gnu.org/onlinedocs/gcc-3.4.3/gcc/Nested-Functions.html nested function] can be used and a function pointer can emulate closures, providing the containing function does not exit. The example below is invalid:
&lt;syntaxhighlight lang="c++"&gt;
#include &lt;stdio.h&gt;

typedef int (*fn_int_to_int)(int); //type of function int-&gt;int

fn_int_to_int adder(int number) {
    int add (int value) { return value + number; }
    return &amp;add; // &amp; operator is optional here because the name of a function in C is a pointer pointing on itself
}
     
int main(void) {
    fn_int_to_int add10 = adder(10);
    printf("%d\n", add10(1));
    return 0;
}
&lt;/syntaxhighlight&gt;

=== Local classes and lambda functions (Java) ===
[[Java (programming language)|Java]] enables [[class (object-oriented programming)|classes]] to be defined inside [[method (object-oriented programming)|methods]].  These are called ''local classes''.  When such classes are not named, they are known as ''anonymous classes'' (or anonymous ''inner'' classes).  A local class (either named or anonymous) may refer to names in lexically enclosing classes, or read-only variables (marked as &lt;code&gt;final&lt;/code&gt;) in the lexically enclosing method.

&lt;syntaxhighlight lang="java"&gt;
class CalculationWindow extends JFrame {
    private volatile int result;
    ...
    public void calculateInSeparateThread(final URI uri) {
        // The expression "new Runnable() { ... }" is an anonymous class implementing the 'Runnable' interface.
        new Thread(
            new Runnable() {
                void run() {
                    // It can read final local variables:
                    calculate(uri);
                    // It can access private fields of the enclosing class:
                    result = result + 10;
                }
            }
        ).start();
    }
}
&lt;/syntaxhighlight&gt;

The capturing of &lt;code&gt;final&lt;/code&gt; variables enables you to capture variables by value. Even if the variable you want to capture is non-&lt;code&gt;final&lt;/code&gt;, you can always copy it to a temporary &lt;code&gt;final&lt;/code&gt; variable just before the class.

Capturing of variables by reference can be emulated by using a &lt;code&gt;final&lt;/code&gt; reference to a mutable container, for example, a single-element array. The local class will not be able to change the value of the container reference itself, but it will be able to change the contents of the container.

With the advent of Java 8's lambda expressions,&lt;ref&gt;{{cite web
| url =http://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html
| title = Lambda Expressions (The Java Tutorials)
}}&lt;/ref&gt; the closure causes the above code to be executed as:

&lt;syntaxhighlight lang="java"&gt;
class CalculationWindow extends JFrame {
    private volatile int result;
    ...
    public void calculateInSeparateThread(final URI uri) {
        // The code () -&gt; { /* code */ } is a closure.
        new Thread(() -&gt; {
                calculate(uri);
                result = result + 10;
        }).start();
    }
}
&lt;/syntaxhighlight&gt;

Local classes are one of the types of inner class that are declared within the body of a method.  Java also supports inner classes that are declared as ''non-static members'' of an enclosing class.&lt;ref&gt;{{cite web
| url = https://blogs.oracle.com/darcy/entry/nested_inner_member_and_top
| title = Nested, Inner, Member, and Top-Level Classes}}&lt;/ref&gt; They are normally referred to just as "inner classes".&lt;ref&gt;{{cite web
| url = http://java.sun.com/docs/books/tutorial/java/javaOO/innerclasses.html
| title = Inner Class Example (The Java Tutorials &amp;gt; Learning the Java Language &amp;gt; Classes and Objects)
}}&lt;/ref&gt; These are defined in the body of the enclosing class and have full access to instance variables of the enclosing class. Due to their binding to these instance variables, an inner class may only be instantiated with an explicit binding to an instance of the enclosing class using a special syntax.&lt;ref&gt;{{cite web
| url = http://java.sun.com/docs/books/tutorial/java/javaOO/nested.html
| title = Nested Classes (The Java Tutorials &amp;gt; Learning the Java Language &amp;gt; Classes and Objects)
}}&lt;/ref&gt;

&lt;syntaxhighlight lang="java"&gt;
public class EnclosingClass {
    /* Define the inner class */
    public class InnerClass {
        public int incrementAndReturnCounter() {
            return counter++;
        }
    }

    private int counter;
    {
        counter = 0;
    }

    public int getCounter() {
        return counter;
    }

    public static void main(String[] args) {
        EnclosingClass enclosingClassInstance = new EnclosingClass();
        /* Instantiate the inner class, with binding to the instance */
        EnclosingClass.InnerClass innerClassInstance =
            enclosingClassInstance.new InnerClass();

        for (int i = enclosingClassInstance.getCounter(); (i =
        innerClassInstance.incrementAndReturnCounter()) &lt; 10;) {
            System.out.println(i);
        }
    }
}
&lt;/syntaxhighlight&gt;

Upon execution, this will print the integers from 0 to 9. Beware to not confuse this type of class with the nested class, which is declared in the same way with an accompanied usage of the "static" modifier; those have not the desired effect but are instead just classes with no special binding defined in an enclosing class.

As of [[Java version history#Java_8|Java 8]], Java supports functions as first class objects. Lambda expressions of this form are considered of type &lt;code&gt;Function&lt;T,U&gt;&lt;/code&gt; with T being the domain and U the image type. The expression can be called with its &lt;code&gt;.apply(T t)&lt;/code&gt; method, but not with a standard method call.

&lt;syntaxhighlight lang="java"&gt;
public static void main(String[] args) {
    Function&lt;String, Integer&gt; length = s -&gt; s.length();

    System.out.println( length.apply("Hello, world!") ); // Will print 13.
}
&lt;/syntaxhighlight&gt;

=== Blocks (C, C++, Objective-C 2.0) ===
{{Main article|Blocks (C language extension)}}
[[Apple Inc.|Apple]] introduced [[Blocks (C language extension)|blocks]], a form of closure, as a nonstandard extension into [[C (programming language)|C]], [[C++]], [[Objective-C 2.0]] and in [[Mac OS X Snow Leopard|Mac OS X 10.6 "Snow Leopard"]] and [[IOS (Apple)|iOS 4.0]]. Apple made their implementation available for the GCC and clang compilers.

Pointers to block and block literals are marked with &lt;code&gt;^&lt;/code&gt;. Normal local variables are captured by value when the block is created, and are read-only inside the block. Variables to be captured by reference are marked with &lt;code&gt;__block&lt;/code&gt;. Blocks that need to persist outside of the scope they are created in may need to be copied.&lt;ref&gt;{{cite web|url=https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/Blocks/Articles/00_Introduction.html|title=Blocks Programming Topics|author=Apple Inc.|accessdate=2011-03-08}}&lt;/ref&gt;&lt;ref&gt;{{cite web|url=http://thirdcog.eu/pwcblocks/|title=Programming with C Blocks On Apple Devices|author=Joachim Bengtsson|date=7 July 2010|accessdate=2010-09-18|archive-url=https://web.archive.org/web/20101025034928/http://thirdcog.eu/pwcblocks/|archive-date=25 October 2010|url-status=dead}}&lt;/ref&gt;

&lt;syntaxhighlight lang="objc"&gt;
typedef int (^IntBlock)();

IntBlock downCounter(int start) {
	 __block int i = start;
	 return [[ ^int() {
		 return i--;
	 } copy] autorelease];
}

IntBlock f = downCounter(5);
NSLog(@"%d", f());
NSLog(@"%d", f());
NSLog(@"%d", f());
&lt;/syntaxhighlight&gt;

=== Delegates (C#, VB.NET, D) ===
[[C Sharp (programming language)|C#]] anonymous methods and lambda expressions support closure:

&lt;syntaxhighlight lang="csharp"&gt;
var data = new[] {1, 2, 3, 4};
var multiplier = 2;
var result = data.Select(x =&gt; x * multiplier);
&lt;/syntaxhighlight&gt;

[[Visual Basic .NET]], which has many language features similar to those of C#, also supports lambda expressions with closures:

&lt;syntaxhighlight lang="vb.net"&gt;
Dim data = {1, 2, 3, 4}
Dim multiplier = 2
Dim result = data.Select(Function(x) x * multiplier)
&lt;/syntaxhighlight&gt;

In [[D (programming language)|D]], closures are implemented by delegates, a function pointer paired with a context pointer (e.g. a class instance, or a stack frame on the heap in the case of closures).

&lt;syntaxhighlight lang="D"&gt;
auto test1() {
    int a = 7;
    return delegate() { return a + 3; }; // anonymous delegate construction
}

auto test2() {
    int a = 20;
    int foo() { return a + 5; } // inner function
    return &amp;foo;  // other way to construct delegate
}

void bar() {
    auto dg = test1();
    dg();    // =10   // ok, test1.a is in a closure and still exists

    dg = test2();
    dg();    // =25   // ok, test2.a is in a closure and still exists
}
&lt;/syntaxhighlight&gt;

D version 1, has limited closure support. For example, the above code will not work correctly, because the variable a is on the stack, and after returning from test(), it is no longer valid to use it (most probably calling foo via dg(), will return a 'random' integer). This can be solved by explicitly allocating the variable 'a' on heap, or using structs or class to store all needed closed variables and construct a delegate from a method implementing the same code. Closures can be passed to other functions, as long as they are only used while the referenced values are still valid (for example calling another function with a closure as a callback parameter), and are useful for writing generic data processing code, so this limitation, in practice, is often not an issue.

This limitation was fixed in D version 2 - the variable 'a' will be automatically allocated on the heap because it is used in the inner function, and a delegate of that function can escape the current scope (via assignment to dg or return). Any other local variables (or arguments) that are not referenced by delegates or that are only referenced by delegates that do not escape the current scope, remain on the stack, which is simpler and faster than heap allocation. The same is true for inner's class methods that references a function's variables.

=== Function objects (C++) ===
[[C++]] enables defining [[function object]]s by overloading &lt;code&gt;operator()&lt;/code&gt;. These objects behave somewhat like functions in a functional programming language. They may be created at runtime and may contain state, but they do not implicitly capture local variables as closures do. As of [[C++11|the 2011 revision]], the C++ language also supports closures, which are a type of function object constructed automatically from a special language construct called ''lambda-expression''. A C++ closure may capture its context either by storing copies of the accessed variables as members of the closure object or by reference. In the latter case, if the closure object escapes the scope of a referenced object, invoking its &lt;code&gt;operator()&lt;/code&gt; causes undefined behavior since C++ closures do not extend the lifetime of their context.{{main article|Anonymous function#C++ (since C++11)}}

&lt;syntaxhighlight lang="cpp"&gt;
void foo(string myname) {
    int y;
    vector&lt;string&gt; n;
    // ...
    auto i = std::find_if(n.begin(), n.end(),
               // this is the lambda expression:
               [&amp;](const string&amp; s) { return s != myname &amp;&amp; s.size() &gt; y; }
             );
    // 'i' is now either 'n.end()' or points to the first string in 'n'
    // which is not equal to 'myname' and whose length is greater than 'y'
}
&lt;/syntaxhighlight&gt;

=== Inline agents (Eiffel) ===
[[Eiffel (programming language)|Eiffel]] includes inline agents defining closures. An inline agent is an object representing a routine, defined by giving the code of the routine in-line. For example, in

&lt;syntaxhighlight lang="eiffel"&gt;
ok_button.click_event.subscribe (
	agent (x, y: INTEGER) do
		map.country_at_coordinates (x, y).display
	end
)
&lt;/syntaxhighlight&gt;

the argument to &lt;code&gt;subscribe&lt;/code&gt; is an agent, representing a procedure with two arguments; the procedure finds the country at the corresponding coordinates and displays it. The whole agent is "subscribed" to the event type &lt;code&gt;click_event&lt;/code&gt; for a
certain button, so that whenever an instance of the event type occurs on that button — because a user has clicked the button — the procedure will be executed with the mouse coordinates being passed as arguments for &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;.

The main limitation of Eiffel agents, which distinguishes them from closures in other languages, is that they cannot reference local variables from the enclosing scope. This design decision helps in avoiding ambiguity when talking about a local variable value in a closure - should it be the latest value of the variable or the value captured when the agent is created? Only &lt;code&gt;Current&lt;/code&gt; (a reference to current object, analogous to &lt;code&gt;this&lt;/code&gt; in Java), its features, and arguments of the agent itself can be accessed from within the agent body. The values of the outer local variables can be passed by providing additional closed operands to the agent.

&lt;br /&gt;

=== C++Builder __closure reserved word ===
Embarcadero C++Builder provides the reserve word __closure to provide a pointer to a method with a similar syntax to a function pointer.&lt;ref&gt;Full documentation can be found at http://docwiki.embarcadero.com/RADStudio/Rio/en/Closure&lt;/ref&gt;

In standard C you could write a {{mono|[[typedef]]}} for a pointer to a function type using the following syntax:&lt;syntaxhighlight lang="c++"&gt;
typedef void (*TMyFunctionPointer)( void );
&lt;/syntaxhighlight&gt;In a similar way you can declare a {{mono|typedef}} for a pointer to a method using the following syntax:&lt;syntaxhighlight lang="c++"&gt;
typedef void (__closure *TMyMethodPointer)();
&lt;/syntaxhighlight&gt;

== See also ==
* [[Anonymous function]]
* [[Blocks (C language extension)]]
* [[Command pattern]]
* [[Continuation]]
* [[Currying]]
* [[Funarg problem]]
* [[Lambda calculus]]
* [[Lazy evaluation]]
* [[Partial application]]
* [[Spaghetti stack]]
* [[Syntactic closure]]
* [[Value-level programming]]

== Notes ==
{{Notelist|30em}}

== References ==
{{Reflist|30em}}

== External links ==
*[https://web.archive.org/web/20160510140804/http://library.readscheme.org/page1.html Original "Lambda Papers"]: A classic series of papers by [[Guy Steele]] and [[Gerald Sussman]] discussing, among other things, the versatility of closures in the context of Scheme (where they appear as ''[[lambda calculus|lambda]] expressions'').
* {{cite web
| author = Neal Gafter
| date = 2007-01-28
| title = A Definition of Closures
| url = http://gafter.blogspot.com/2007/01/definition-of-closures.html
| author-link = Neal Gafter
}}
* {{cite web
| author = [[Gilad Bracha]], [[Neal Gafter]], [[James Gosling]], [[Peter von der Ahé]]
| title = Closures for the Java Programming Language (v0.5)
| url = http://www.javac.info/closures-v05.html
}}
*[http://martinfowler.com/bliki/Closure.html Closures]: An article about closures in [[Dynamic typing|dynamically typed]] imperative languages, by [[Martin Fowler (software engineer)|Martin Fowler]].
*[http://martinfowler.com/bliki/CollectionClosureMethod.html Collection closure methods]: An example of a technical domain where using closures is convenient, by Martin Fowler.
{{Use dmy dates|date=February 2011}}

{{DEFAULTSORT:Closure (Computer Science)}}
[[Category:Programming language concepts]]
[[Category:Implementation of functional programming languages]]
[[Category:Subroutines]]
[[Category:Articles with example Python code]]
[[Category:Articles with example Scheme code]]
[[Category:Articles with example JavaScript code]]
[[Category:Articles with example C++ code]]
[[Category:Articles with example Eiffel code]]
[[Category:Articles with example C Sharp code]]
[[Category:Articles with example D code]]
[[Category:Articles with example Objective-C code]]
[[Category:Articles with example Java code]]
[[Category:Articles with example Ruby code]]
[[Category:Articles with example Smalltalk code]]
[[Category:Articles with example Haskell code]]</text>
      <sha1>spsgsib2vlstl2i45eeywu6zdpn394h</sha1>
    </revision>
  </page>
</mediawiki>
