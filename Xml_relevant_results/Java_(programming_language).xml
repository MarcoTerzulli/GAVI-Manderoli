<mediawiki xmlns="http://www.mediawiki.org/xml/export-0.10/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mediawiki.org/xml/export-0.10/ http://www.mediawiki.org/xml/export-0.10.xsd" version="0.10" xml:lang="en">
  <siteinfo>
    <sitename>Wikipedia</sitename>
    <dbname>enwiki</dbname>
    <base>https://en.wikipedia.org/wiki/Main_Page</base>
    <generator>MediaWiki 1.35.0-wmf.31</generator>
    <case>first-letter</case>
    <namespaces>
      <namespace key="-2" case="first-letter">Media</namespace>
      <namespace key="-1" case="first-letter">Special</namespace>
      <namespace key="0" case="first-letter" />
      <namespace key="1" case="first-letter">Talk</namespace>
      <namespace key="2" case="first-letter">User</namespace>
      <namespace key="3" case="first-letter">User talk</namespace>
      <namespace key="4" case="first-letter">Wikipedia</namespace>
      <namespace key="5" case="first-letter">Wikipedia talk</namespace>
      <namespace key="6" case="first-letter">File</namespace>
      <namespace key="7" case="first-letter">File talk</namespace>
      <namespace key="8" case="first-letter">MediaWiki</namespace>
      <namespace key="9" case="first-letter">MediaWiki talk</namespace>
      <namespace key="10" case="first-letter">Template</namespace>
      <namespace key="11" case="first-letter">Template talk</namespace>
      <namespace key="12" case="first-letter">Help</namespace>
      <namespace key="13" case="first-letter">Help talk</namespace>
      <namespace key="14" case="first-letter">Category</namespace>
      <namespace key="15" case="first-letter">Category talk</namespace>
      <namespace key="100" case="first-letter">Portal</namespace>
      <namespace key="101" case="first-letter">Portal talk</namespace>
      <namespace key="108" case="first-letter">Book</namespace>
      <namespace key="109" case="first-letter">Book talk</namespace>
      <namespace key="118" case="first-letter">Draft</namespace>
      <namespace key="119" case="first-letter">Draft talk</namespace>
      <namespace key="446" case="first-letter">Education Program</namespace>
      <namespace key="447" case="first-letter">Education Program talk</namespace>
      <namespace key="710" case="first-letter">TimedText</namespace>
      <namespace key="711" case="first-letter">TimedText talk</namespace>
      <namespace key="828" case="first-letter">Module</namespace>
      <namespace key="829" case="first-letter">Module talk</namespace>
      <namespace key="2300" case="first-letter">Gadget</namespace>
      <namespace key="2301" case="first-letter">Gadget talk</namespace>
      <namespace key="2302" case="case-sensitive">Gadget definition</namespace>
      <namespace key="2303" case="case-sensitive">Gadget definition talk</namespace>
    </namespaces>
  </siteinfo>
  <page>
    <title>Java (programming language)</title>
    <ns>0</ns>
    <id>15881</id>
    <revision>
      <id>956349384</id>
      <parentid>956122255</parentid>
      <timestamp>2020-05-12T21:30:42Z</timestamp>
      <contributor>
        <username>Zaenon</username>
        <id>31084544</id>
      </contributor>
      <minor/>
      <comment>Reverted 1 edit by [[Special:Contributions/105.184.175.163|105.184.175.163]] ([[User talk:105.184.175.163|talk]]) to last revision by TheImaCow ([[WP:TW|TW]])</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="74545" xml:space="preserve">{{About|the programming language|the software platform|Java (software platform)|the software package downloaded from java.com|Java Platform, Standard Edition|other uses|Java (disambiguation)}}
{{redirect-distinguish|Java language|Javanese language}}
{{Use mdy dates|date=August 2017}}
{{short description|Object-oriented programming language}}
{{Infobox programming language
| name = Java Programming Language
| logo = [[File:Java programming language logo.svg|259x259px]]
| paradigm = [[Programming paradigm#Multi-paradigm|Multi-paradigm]]: [[generic programming|generic]], [[object-oriented]] ([[class-based programming|class-based]]), [[imperative programming|imperative]], [[reflection (computer programming)|reflective]]
| year = {{Start date and age|1995|5|23}}&lt;ref&gt;{{cite magazine|url=https://www.forbes.com/sites/oracle/2015/05/20/javas-20-years-of-innovation/|title=Java's 20 Years of Innovation|magazine=Forbes|date=May 20, 2015|accessdate=March 18, 2016|author=Binstock, Andrew|archive-url=https://web.archive.org/web/20160314102242/http://www.forbes.com/sites/oracle/2015/05/20/javas-20-years-of-innovation/|archive-date=March 14, 2016|url-status=live|df=mdy-all}}&lt;/ref&gt;
| discontinued = &lt;!-- Set to yes if software is discontinued, otherwise omit. --&gt;
| ver layout = &lt;!-- simple (default) or stacked --&gt;
| latest release version = Java SE 14&lt;ref&gt;{{cite web|url=https://blogs.oracle.com/java-platform-group/the-arrival-of-java-14|title=The Arrival of Java 14!|date=March 17, 2020|publisher=[[Oracle Corporation|Oracle]]|accessdate=2020-03-17}}&lt;/ref&gt;
| latest release date = {{start date and age|2020|03|17}}
| latest preview version = 
| latest preview date = 
| designer = [[James Gosling]]
| developer = [[Sun Microsystems]]
| typing = [[type system|Static, strong, safe]], [[nominal type system|nominative]], [[manifest typing|manifest]]
| implementation
 = Compilers: [[OpenJDK]] (javac, sjavac), [[GNU Compiler for Java]] (GCJ), Eclipse Compiler for Java (ECJ)&lt;br /&gt;Virtual machines: OpenJDK JRE, [[JRockit|Oracle JRockit]], [[Azul Systems|Azul Zing]], [[OpenJ9|IBM J9]], [[Excelsior JET]], Gluon VM, [[Microsoft Java Virtual Machine|Microsoft JVM]], [[Apache Harmony]]&lt;br /&gt;JIT compilers: [[HotSpot]], [[GraalVM]], [[Azul Systems|Azul Falcon (LLVM)]]
| influenced_by = [[CLU (programming language)|CLU]]&lt;ref name="BarbaraLiskov"&gt;{{cite book |title=Program Development in Java - Abstraction, Specification, and Object-Oriented Design|author=[[Barbara Liskov]] with [[John Guttag]]|publisher=USA, Addison Wesley|year=2000}}&lt;/ref&gt;, [[Simula67|Simula67]]&lt;ref name="BarbaraLiskov"&gt;&lt;/ref&gt;, [[LISP|LISP]]&lt;ref name="BarbaraLiskov"&gt;&lt;/ref&gt;, [[SmallTalk|SmallTalk]]&lt;ref name="BarbaraLiskov"&gt;&lt;/ref&gt;, [[Ada (programming language)|Ada 83]], [[C++]],&lt;ref&gt;{{cite web|url={{Google books|0rUtBAAAQBAJ|page=PA133|keywords=|text=|plainurl=yes}}|title=Cracking The Java Programming Interview :: 2000+ Java Interview Que/Ans|first=Harry H.|last=Chaudhary|accessdate=2016-05-29|date=2014-07-28}}&lt;/ref&gt; [[C Sharp (programming language)|C#]],&lt;ref&gt;Java&amp;nbsp;5.0 added several new language features (the [[foreach loop|enhanced for loop]], [[object type (object-oriented programming)#Autoboxing|autoboxing]], [[variadic function|varargs]] and [[Java annotation|annotations]]), after they were introduced in the similar (and competing) [[C Sharp (programming language)|C#]] language. [http://www.barrycornelius.com/papers/java5/] {{Webarchive|url=https://web.archive.org/web/20110319065438/http://www.barrycornelius.com/papers/java5/|date=March 19, 2011}} [http://www.levenez.com/lang/] {{Webarchive|url=https://web.archive.org/web/20060107162045/http://www.levenez.com/lang/|date=January 7, 2006}}&lt;/ref&gt; [[Eiffel (programming language)|Eiffel]],&lt;ref&gt;{{cite web|author1=Gosling, James|author2=McGilton, Henry|title=The Java Language Environment|date=May 1996|url=https://www.oracle.com/technetwork/java/langenv-140151.html|access-date=May 6, 2014|archive-url=https://web.archive.org/web/20140506214653/http://www.oracle.com/technetwork/java/langenv-140151.html|archive-date=May 6, 2014|url-status=live|df=mdy-all}}&lt;/ref&gt; [[Mesa (programming language)|Mesa]],&lt;ref&gt;{{cite web|author1=Gosling, James|author2=Joy, Bill|author3=Steele, Guy|author4=Bracha, Gilad|title=The Java Language Specification, 2nd Edition|url=https://java.sun.com/docs/books/jls/second_edition/html/intro.doc.html#237601|access-date=February 8, 2008|archive-url=https://web.archive.org/web/20110805051057/http://java.sun.com/docs/books/jls/second_edition/html/intro.doc.html#237601|archive-date=August 5, 2011 |url-status=live |df=mdy-all }}&lt;/ref&gt; [[Modula-3]],&lt;ref&gt;{{cite web|url=http://www.computerworld.com.au/index.php/id;1422447371;pp;3;fp;4194304;fpid;1|title=The A-Z of Programming Languages: Modula-3|publisher=Computerworld.com.au|accessdate=2010-06-09|url-status=dead|archiveurl=https://web.archive.org/web/20090105145818/http://www.computerworld.com.au/index.php/id%3B1422447371%3Bpp%3B3%3Bfp%3B4194304%3Bfpid%3B1|archivedate=January 5, 2009|df=mdy-all}}&lt;/ref&gt; [[Oberon (programming language)|Oberon]],&lt;ref&gt;[[Niklaus Wirth]] stated on a number of public occasions, e.g. in a lecture at the Polytechnic Museum, Moscow in September 2005 (several independent first-hand accounts in Russian exist, e.g. one with an audio recording: {{cite web|author=Filippova, Elena|title=Niklaus Wirth's lecture at the Polytechnic Museum in Moscow|date=September 22, 2005|url=http://www.delphikingdom.com/asp/viewitem.asp?catalogid=1155}}), that the Sun Java design team licensed the Oberon compiler sources a number of years prior to the release of Java and examined it: a (relative) compactness, type safety, garbage collection, no multiple inheritance for classes{{snd}} all these key overall design features are shared by Java and Oberon.&lt;/ref&gt; [[Objective-C]],&lt;ref&gt;[[Patrick Naughton]] cites [[Objective-C]] as a strong influence on the design of the Java programming language, stating that notable direct derivatives include Java interfaces (derived from Objective-C's [[Objective-C#Protocols|protocol]]) and primitive wrapper classes. [http://cs.gmu.edu/~sean/stuff/java-objc.html] {{Webarchive|url=https://web.archive.org/web/20110713014816/http://cs.gmu.edu/~sean/stuff/java-objc.html|date=July 13, 2011}}&lt;/ref&gt; [[UCSD Pascal]],&lt;ref&gt;{{cite web|url=http://www.fscript.org/prof/javapassport.pdf|quote=The project went ahead under the name ''green'' and the language was based on an old model of [[UCSD Pascal]], which makes it possible to generate interpretive code.|title=History of Java|work=Java Application Servers Report|author=TechMetrix Research|year=1999|url-status=dead|archiveurl=https://web.archive.org/web/20101229090912/http://www.fscript.org/prof/javapassport.pdf|archivedate=December 29, 2010|df=mdy-all}}&lt;/ref&gt;&lt;ref&gt;{{cite web|url=http://queue.acm.org/detail.cfm?id=1017013|title=A Conversation with James Gosling – ACM Queue |publisher=Queue.acm.org|date=August 31, 2004|accessdate=2010-06-09|archive-url=https://web.archive.org/web/20150716194245/http://queue.acm.org/detail.cfm?id=1017013|archive-date=July 16, 2015|url-status=live|df=mdy-all}}&lt;/ref&gt; [[Object Pascal]]&lt;ref&gt;In the summer of 1996, Sun was designing the precursor to what is now the event model of the AWT and the JavaBeans component architecture. Borland contributed greatly to this process. We looked very carefully at Delphi Object Pascal and built a working prototype of bound method references in order to understand their interaction with the Java programming language and its APIs.[https://web.archive.org/web/20120627043929/http://java.sun.com/docs/white/delegates.html White Paper About Microsoft's Delegates]&lt;/ref&gt;
| influenced = [[Ada (programming language)|Ada 2005]], [[BeanShell]], [[C Sharp (programming language)|C#]], [[Chapel (programming language)|Chapel]],&lt;ref name="chplspec"&gt;{{cite web|title=Chapel spec (Acknowledgements)|url=http://chapel.cray.com/spec/spec-0.98.pdf|date=2015-10-01|accessdate=2016-01-14|publisher=Cray Inc.|archive-url=https://web.archive.org/web/20160205114946/http://chapel.cray.com/spec/spec-0.98.pdf|archive-date=February 5, 2016|url-status=live|df=mdy-all}}&lt;/ref&gt; [[Clojure]], [[ECMAScript]], [[Fantom (programming language)|Fantom]], [[Gambas]],&lt;ref name="gambas"&gt;{{cite web|url=http://gambaswiki.org/wiki/doc/intro?nh&amp;l=en|title=Gambas Documentation Introduction|publisher=Gambas Website|accessdate=2017-10-09|archive-url=https://web.archive.org/web/20171009041815/http://gambaswiki.org/wiki/doc/intro?nh&amp;l=en|archive-date=October 9, 2017|url-status=live|df=mdy-all}}&lt;/ref&gt; [[Groovy (programming language)|Groovy]], [[Hack (programming language)|Hack]],&lt;ref&gt;{{cite magazine|url=http://www.infoworld.com/article/2610885/facebook-q-a--hack-brings-static-typing-to-php-world.html|title=Facebook Q&amp;A: Hack brings static typing to PHP world|magazine=InfoWorld|date=March 26, 2014|accessdate=2015-01-11|archive-url=https://web.archive.org/web/20150213220946/http://www.infoworld.com/article/2610885/facebook-q-a--hack-brings-static-typing-to-php-world.html|archive-date=February 13, 2015|url-status=live|df=mdy-all}}&lt;/ref&gt; [[Haxe (programming language)|Haxe]], [[J Sharp|J#]], [[Kotlin (programming language)|Kotlin]], [[PHP]], [[Python (programming language)|Python]], [[Scala (programming language)|Scala]], [[Seed7]], [[Vala (programming language)|Vala]]
| website = {{url|oracle.com/java/}}
| file_ext = .java, [[Java class file|.class]], [[JAR (file format)|.jar]]
| wikibooks = Java Programming
}}

'''Java''' is a [[general-purpose language|general-purpose]] [[programming language]] that is [[class-based programming|class-based]], [[object-oriented programming|object-oriented]], and designed to have as few implementation [[Dependency (computer science)|dependencies]] as possible. It is intended to let [[application developer]]s ''write once, run anywhere'' (WORA),&lt;ref&gt;{{cite web|url=http://www.computerweekly.com/Articles/2002/05/02/186793/write-once-run-anywhere.htm|title=Write once, run anywhere?|date=May 2, 2002|publisher=[[Computer Weekly]]|accessdate=2009-07-27}}&lt;/ref&gt; meaning that [[compiler|compiled]] Java code can run on all platforms that support Java without the need for recompilation.&lt;ref name="design_goals"&gt;{{cite web|url=https://www.oracle.com/technetwork/java/intro-141325.html|title=1.2 Design Goals of the Java™ Programming Language|publisher=Oracle|date=January 1, 1999|accessdate=2013-01-14|archive-url=https://web.archive.org/web/20130123204103/http://www.oracle.com/technetwork/java/intro-141325.html|archive-date=January 23, 2013|url-status=live|df=mdy-all}}&lt;/ref&gt; Java applications are typically compiled to [[Java bytecode|bytecode]] that can run on any [[Java virtual machine]] (JVM) regardless of the underlying [[computer architecture]]. The [[syntax (programming languages)|syntax]] of [[Java (software platform)|Java]] is similar to [[C (programming language)|C]] and [[C++]], but it has fewer [[low-level programming language|low-level]] facilities than either of them. {{as of|2019}}, Java was one of the most [[Measuring programming language popularity|popular programming languages in use]] according to [[GitHub]],&lt;ref name=":0"&gt;
{{cite web|url=https://www.wired.com/2013/01/java-no-longer-a-favorite/ |title=Is Java Losing Its Mojo? |quote=Java is on the wane, at least according to one outfit that keeps on eye on the ever-changing world of computer programming languages. For more than a decade, it has dominated the [[TIOBE index|TIOBE]] Programming Community Index, and is back on top –  a snapshot of software developer enthusiasm that looks at things like internet search results to measure how much buzz different languages have. But lately, Java has been slipping.|first=Robert|last=McMillan|date=August 1, 2013|magazine=[[wired.com]]|access-date=March 8, 2017|archive-url=https://web.archive.org/web/20170215115409/https://www.wired.com/2013/01/java-no-longer-a-favorite/|archive-date=February 15, 2017|url-status=live|df=mdy-all
}}&lt;/ref&gt;&lt;ref&gt;
{{cite web |last1=Chan |first1=Rosalie |title=The 10 most popular programming languages, according to the 'Facebook for programmers' |url=https://www.businessinsider.de/the-10-most-popular-programming-languages-according-to-github-2018-10?op=1 |website=[[Business Insider]] |url-status=live |accessdate=June 29, 2019 |archiveurl=https://archive.today/20190629083530/https://www.businessinsider.com/the-10-most-popular-programming-languages-according-to-github-2018-10?op=1&amp;r=DE&amp;IR=T |archivedate=June 29, 2019 |date=January 22, 2019
}}&lt;/ref&gt; 
particularly for [[Client–server|client-server]] [[web applications]], with a reported 9 million developers.&lt;ref&gt;
{{Cite web|url=https://www.oracle.com/technetwork/articles/java/afterglow2013-2030343.html|title=JavaOne 2013 Review: Java Takes on the Internet of Things|website=www.oracle.com|access-date=2016-06-19|archive-url=https://www.imarslan.com/javaone-2013-review-java-takes-on-the-internet-of-things|archive-date=April 19, 2016|url-status=live|df=mdy-all
}}&lt;/ref&gt;

Java was originally developed by [[James Gosling]] at [[Sun Microsystems]] ([[Sun acquisition by Oracle|which has since been acquired by Oracle]]) and released in 1995 as a core component of Sun Microsystems' [[Java (software platform)|Java platform]]. The original and [[reference implementation]] Java [[compiler]]s, virtual machines, and [[library (computing)|class libraries]] were originally released by Sun under [[proprietary license]]s. As of May 2007, in compliance with the specifications of the [[Java Community Process]], Sun had [[Software relicensing|relicensed]] most of its Java technologies under the [[GNU General Public License]]. Meanwhile, others have developed alternative implementations of these Sun technologies, such as the [[GNU Compiler for Java]] (bytecode compiler), [[GNU Classpath]] (standard libraries), and [[IcedTea]]-Web (browser plugin for applets).

The latest versions are [[Java version history|Java&amp;nbsp;14]], released in March 2020, and Java&amp;nbsp;11, a currently supported [[long-term support]] (LTS) version, released on September 25, 2018; [[Oracle Corporation|Oracle]] released for the [[legacy system|legacy]] [[Java 8|Java&amp;nbsp;8]]&amp;nbsp;LTS the last free public update in January 2019 for commercial use, while it will otherwise still support Java&amp;nbsp;8 with public updates for personal use up to at least December 2020. Oracle (and others) highly recommend uninstalling older versions of Java because of serious risks due to unresolved security issues.&lt;ref&gt;{{Cite web|url=https://www.java.com/en/download/faq/remove_olderversions.xml|title=Why should I uninstall older versions of Java from my system? |publisher=Oracle |accessdate=2016-09-09}}&lt;/ref&gt; Since Java 9, 10, 12 and 13 are no longer supported, Oracle advises its users to immediately transition to the latest version (currently Java 14) or an LTS release.

==History==
{{See also|Java (software platform)#History}}
[[File:Duke (Java mascot) waving.svg|thumb|upright=0.5|Duke, the Java mascot]]
[[File:James Gosling 2008.jpg|thumb|[[James Gosling]], the creator of Java, in 2008]]
[[File:Tiobeindex.png|thumb|The [[TIOBE index|TIOBE]] [[Measuring programming language popularity|programming language popularity index]] graph from 2002 to 2018. Java is steadily on the top since mid-2015.]]

[[James Gosling]], Mike Sheridan, and [[Patrick Naughton]] initiated the Java language project in June 1991.&lt;ref&gt;{{cite web |url=https://java.sun.com/features/1998/05/birthday.html |title=Java technology: The early years |last=Byous |first=Jon |date=c. 1998 |work=Sun Developer Network |publisher=[[Sun Microsystems]] |accessdate=2005-04-22|archiveurl=https://web.archive.org/web/20050420081440/http://java.sun.com/features/1998/05/birthday.html |archivedate=April 20, 2005}}&lt;/ref&gt; Java was originally designed for interactive television, but it was too advanced for the digital cable television industry at the time.&lt;ref&gt;Object-oriented programming {{cite web |url=http://www.java.com/en/javahistory/ |title=The History of Java Technology |date=c. 1995 |work=Sun Developer Network |accessdate=2010-04-30 |archive-url=https://web.archive.org/web/20100210225651/http://www.java.com/en/javahistory/ |archive-date=February 10, 2010 |url-status=live |df=mdy-all }}&lt;/ref&gt; The language was initially called ''[[Oak (programming language)|Oak]]'' after an [[oak]] tree that stood outside Gosling's office. Later the project went by the name ''Green'' and was finally renamed ''Java'', from [[Java coffee]], the coffee from [[Indonesia]].&lt;ref&gt;"[http://www.javaworld.com/jw-10-1996/jw-10-javaname.html So why did they decide to call it Java?] {{Webarchive|url=https://web.archive.org/web/20131115113216/http://www.javaworld.com/jw-10-1996/jw-10-javaname.html |date=November 15, 2013 }}", Kieron Murphy, JavaWorld.com, 10/04/96&lt;/ref&gt; Gosling designed Java with a [[C (programming language)|C]]/[[C++]]-style syntax that system and application programmers would find familiar.&lt;ref&gt;Kabutz, Heinz; [http://www.artima.com/weblogs/viewpost.jsp?thread=7555 ''Once Upon an Oak''] {{Webarchive|url=https://web.archive.org/web/20070413072630/http://www.artima.com/weblogs/viewpost.jsp?thread=7555 |date=April 13, 2007 }}. Artima. Retrieved April 29, 2007.&lt;/ref&gt;

Sun Microsystems released the first public implementation as Java&amp;nbsp;1.0 in 1996.&lt;ref name="oraclejavahistory"&gt;{{cite web | url=http://www.sun.com/smi/Press/sunflash/1996-01/sunflash.960123.10561.xml | archive-url=https://web.archive.org/web/20070310235103/http://www.sun.com/smi/Press/sunflash/1996-01/sunflash.960123.10561.xml | url-status=dead | archive-date=2007-03-10 | title=JAVASOFT SHIPS JAVA 1.0 | accessdate=2018-05-13}}&lt;/ref&gt; It promised '''Write Once, Run Anywhere''' (WORA) functionality, providing no-cost run-times on popular [[Computing platform|platforms]]. Fairly secure and featuring configurable security, it allowed network- and file-access restrictions. Major [[web browser]]s soon incorporated the ability to run [[Java applet]]s within web pages, and Java quickly became popular. The Java&amp;nbsp;1.0 compiler was re-written [[Bootstrapping (compilers)|in Java]] by [[Arthur van Hoff]] to comply strictly with the Java&amp;nbsp;1.0 language specification.&lt;ref&gt;{{cite book | url={{Google books|rXGMFYXFDwMC|page=|keywords=|text=|plainurl=yes}} | title= Object-oriented Programming with Java: Essentials and Applications | publisher=Tata McGraw-Hill Education | page=34}}&lt;/ref&gt; With the advent of Java&amp;nbsp;2 (released initially as J2SE&amp;nbsp;1.2 in December 1998{{snd}} 1999), new versions had multiple configurations built for different types of platforms. J2EE included technologies and APIs for enterprise applications typically run in server environments, while J2ME featured APIs optimized for mobile applications. The desktop version was renamed J2SE. In 2006, for marketing purposes, Sun renamed new J2 versions as ''[[Java Platform, Enterprise Edition|Java EE]]'', ''[[Java Platform, Micro Edition|Java ME]]'', and ''[[Java Platform, Standard Edition|Java SE]]'', respectively.

In 1997, Sun Microsystems approached the [[ISO/IEC JTC 1]] standards body and later the [[Ecma International]] to formalize Java, but it soon withdrew from the process.&lt;ref&gt;{{cite web|url=http://www.open-std.org/JTC1/SC22/JSG/|title=JSG – Java Study Group|work=open-std.org|access-date=August 2, 2006|archive-url=https://web.archive.org/web/20060825082008/http://www.open-std.org/JTC1/SC22/JSG/|archive-date=August 25, 2006|url-status=live|df=mdy-all}}&lt;/ref&gt;&lt;ref&gt;{{cite web | url=http://www.computer.org/csdl/proceedings/hicss/2001/0981/05/09815015.pdf | title=Why Java™ Was – Not – Standardized Twice | access-date=June 3, 2018 | archive-url=https://web.archive.org/web/20140113101235/http://www.computer.org/csdl/proceedings/hicss/2001/0981/05/09815015.pdf | archive-date=January 13, 2014 | url-status=live | df=mdy-all }}&lt;/ref&gt;&lt;ref&gt;{{cite web |url=http://www.zdnet.com/news/what-is-ecma-and-why-microsoft-cares/298821 |title=What is ECMA—and why Microsoft cares |access-date=May 6, 2014 |archive-url=https://web.archive.org/web/20140506215226/http://www.zdnet.com/news/what-is-ecma-and-why-microsoft-cares/298821 |archive-date=May 6, 2014 |url-status=live |df=mdy-all }}&lt;/ref&gt; Java remains a [[de facto standard|''de facto'' standard]], controlled through the [[Java Community Process]].&lt;ref&gt;{{cite web |url=http://www.jcp.org/en/home/index |title=Java Community Process website |publisher=Jcp.org |date=May 24, 2010 |accessdate=2010-06-09 |archive-url=https://web.archive.org/web/20060808070528/http://www.jcp.org/en/home/index |archive-date=August 8, 2006 |url-status=live |df=mdy-all }}&lt;/ref&gt; At one time, Sun made most of its Java implementations available without charge, despite their [[proprietary software]] status. Sun generated revenue from Java through the selling of licenses for specialized products such as the Java Enterprise System.

On November 13, 2006, Sun released much of its Java virtual machine (JVM) as [[free and open-source software]] (FOSS), under the terms of the [[GNU General Public License]] (GPL). On May 8, 2007, Sun finished the process, making all of its JVM's core code available under [[free software]]/open-source distribution terms, aside from a small portion of code to which Sun did not hold the copyright.&lt;ref&gt;{{cite web |url=http://grnlight.net/index.php/programming-articles/115-javaone-sun-the-bulk-of-java-is-open-sourced |title=JAVAONE: Sun – The bulk of Java is open sourced |publisher=GrnLight.net |accessdate=2014-05-26 |archive-url=https://web.archive.org/web/20140527220942/http://grnlight.net/index.php/programming-articles/115-javaone-sun-the-bulk-of-java-is-open-sourced |archive-date=May 27, 2014 |url-status=live |df=mdy-all }}&lt;/ref&gt;

Sun's vice-president Rich Green said that Sun's ideal role with regard to Java was as an ''evangelist''.&lt;ref&gt;{{cite web
 |url          = http://onjava.com/pub/a/onjava/2002/04/17/evangelism.html
 |title        = Sun's Evolving Role as Java Evangelist
 |publisher    = [[O'Reilly Media]]
 |access-date  = August 2, 2009
 |archive-url  = https://web.archive.org/web/20100915162748/http://onjava.com/pub/a/onjava/2002/04/17/evangelism.html
 |archive-date = September 15, 2010
 |url-status     = live
 |df           = mdy-all
}}&lt;/ref&gt; Following [[Oracle Corporation]]'s acquisition of Sun Microsystems in 2009–10, Oracle has described itself as the steward of Java technology with a relentless commitment to fostering a community of participation and transparency.&lt;ref&gt;{{cite web
 |url=https://www.oracle.com/us/technologies/java/index.html 
 |title=Oracle and Java 
 |work=oracle.com 
 |publisher=Oracle Corporation 
 |accessdate=2010-08-23 
 |quote=Oracle has been a leading and substantive supporter of Java since its emergence in 1995 and takes on the new role as steward of Java technology with a relentless commitment to fostering a community of participation and transparency. 
 |url-status=bot: unknown 
 |archiveurl=https://web.archive.org/web/20100131091008/http://www.oracle.com/us/technologies/java/index.html 
 |archivedate=January 31, 2010 
}}&lt;/ref&gt; This did not prevent Oracle from filing a lawsuit against Google shortly after that for using Java inside the [[Android SDK]] (see the ''[[#Android|Android]]'' section).

On April 2, 2010, James Gosling resigned from [[Oracle Corporation|Oracle]].&lt;ref&gt;{{cite web|url=http://nighthacks.com/roller/jag/entry/time_to_move_on |title=Time to move on... |last=Gosling |first=James |date=April 9, 2010 |work=On a New Road |accessdate=2011-11-16 |authorlink=James Gosling |url-status=bot: unknown |archiveurl=https://web.archive.org/web/20101105031239/http://nighthacks.com/roller/jag/entry/time_to_move_on |archivedate=November 5, 2010 }}&lt;/ref&gt;

In January 2016, Oracle announced that Java run-time environments based on JDK 9 will discontinue the browser plugin.&lt;ref&gt;{{cite web|url=https://blogs.oracle.com/java-platform-group/entry/moving_to_a_plugin_free|title=Moving to a Plugin-Free Web|first=Dalibor|last=Topic|publisher=|access-date=March 15, 2016|archive-url=https://web.archive.org/web/20160316164325/https://blogs.oracle.com/java-platform-group/entry/moving_to_a_plugin_free|archive-date=March 16, 2016|url-status=live|df=mdy-all}}&lt;/ref&gt;

Java software runs on everything from laptops to [[data center]]s, [[Video game console|game consoles]] to scientific [[supercomputer]]s.&lt;ref&gt;{{cite web|title=Learn About Java Technology|url=http://www.java.com/en/about/|publisher=Oracle|accessdate=November 21, 2011|archive-url=https://web.archive.org/web/20111124090716/http://www.java.com/en/about/|archive-date=November 24, 2011|url-status=live|df=mdy-all}}&lt;/ref&gt;

===Principles===
There were five primary goals in the creation of the Java language:&lt;ref name="design_goals"/&gt;

&lt;!--NOTE: THESE 5 ARE QUOTED DIRECTLY FROM THE SOURCE. DON'T REMOVE ANY OR ADD NEW ONES!--&gt;&lt;blockquote&gt;
# It must be simple, object-oriented, and familiar.
# It must be robust and secure.
# It must be architecture-neutral and portable.
# It must execute with high performance.
# It must be interpreted, threaded, and dynamic.
&lt;/blockquote&gt;&lt;!--NOTE: THESE 5 ARE QUOTED DIRECTLY FROM THE SOURCE. DON'T REMOVE ANY OR ADD NEW ONES!--&gt;

===Versions===
{{Main|Java version history}}

{{As of|2020|03}}, Java&amp;nbsp;8 and 11 are supported as Long Term Support (LTS) versions, and one later non-LTS version is supported. Major release versions of Java, along with their release dates:

* JDK 1.0 (January 23, 1996)&lt;ref&gt;{{cite web|url=http://www.sun.com/smi/Press/sunflash/1996-01/sunflash.960123.10561.xml |title=JAVASOFT SHIPS JAVA 1.0 |accessdate=2008-02-05 |url-status=dead |archiveurl=https://web.archive.org/web/20070310235103/http://www.sun.com/smi/Press/sunflash/1996-01/sunflash.960123.10561.xml |archivedate=March 10, 2007 |df= }}&lt;/ref&gt;
* JDK 1.1 (February 19, 1996)
* J2SE 1.2 (December 8, 1998)
* J2SE 1.3 (May 8, 2000)
* J2SE 1.4 (February 6, 2002)
* J2SE 5.0 (September 30, 2004)
* Java SE 6 (December 11, 2006)
* Java SE 7 (July 28, 2011)
* Java SE 8 (March 18, 2014)
* Java SE 9 (September 21, 2017)
* Java SE 10 (March 20, 2018)
* Java SE 11 (September 25, 2018)&lt;ref&gt;{{cite web|url=https://blogs.oracle.com/java-platform-group/introducing-java-se-11|title=Introducing Java SE 11|first=Sharat|last=Chander|website=oracle.com|accessdate=September 26, 2018|archive-url=https://web.archive.org/web/20180926093144/https://blogs.oracle.com/java-platform-group/introducing-java-se-11|archive-date=September 26, 2018|url-status=live|df=mdy-all}}&lt;/ref&gt;
* Java SE 12 (March 19, 2019)
* Java SE 13 (September 17, 2019)
* Java SE 14 (March 17, 2020)

==Editions==
{{update|inaccurate=y|date=July 2019}}
{{See also|Free Java implementations#Class library}}
{{Java platforms}}

Sun has defined and supports four editions of Java targeting different application environments and segmented many of its [[application programming interface|APIs]] so that they belong to one of the platforms. The platforms are:

* [[Java Card]] for smart-cards.&lt;ref name="java_card"&gt;{{cite web | url=https://www.oracle.com/technetwork/java/embedded/javacard/overview/index.html | title=Java Card Overview | publisher=Oracle | work=Oracle Technology Network | accessdate=December 18, 2014 | archive-url=https://web.archive.org/web/20150107034738/http://www.oracle.com/technetwork/java/embedded/javacard/overview/index.html | archive-date=January 7, 2015 | url-status=live | df=mdy-all }}&lt;/ref&gt;
* [[Java Platform, Micro Edition]] (Java ME) – targeting environments with limited resources.&lt;ref name="java_me"&gt;{{cite web | url=https://www.oracle.com/technetwork/java/embedded/javame/index.html | title=Java Platform, Micro Edition (Java ME) | publisher=Oracle | work=Oracle Technology Network | accessdate=December 18, 2014 | archive-url=https://web.archive.org/web/20150104210546/http://www.oracle.com/technetwork/java/embedded/javame/index.html | archive-date=January 4, 2015 | url-status=live | df=mdy-all }}&lt;/ref&gt;
* [[Java Platform, Standard Edition]] (Java SE) – targeting workstation environments.&lt;ref name="java_se"&gt;{{cite web | url=https://www.oracle.com/technetwork/java/javase/overview/index.html | title=Java SE | publisher=Oracle | work=Oracle Technology Network | accessdate=December 18, 2014 | archive-url=https://web.archive.org/web/20141224184532/http://www.oracle.com/technetwork/java/javase/overview/index.html | archive-date=December 24, 2014 | url-status=live | df=mdy-all }}&lt;/ref&gt;
* [[Java Platform, Enterprise Edition]] (Java EE) – targeting large distributed enterprise or Internet environments.&lt;ref name="java_ee"&gt;{{cite web | url=https://www.oracle.com/technetwork/java/javaee/overview/index.html | title=Java Platform, Enterprise Edition (Java EE) | publisher=Oracle | work=Oracle Technology Network | accessdate=December 18, 2014 | archive-url=https://web.archive.org/web/20141217155326/http://www.oracle.com/technetwork/java/javaee/overview/index.html | archive-date=December 17, 2014 | url-status=live | df=mdy-all }}&lt;/ref&gt;

The [[Class (computer programming)|classes]] in the Java APIs are organized into separate groups called [[Java package|packages]]. Each package contains a set of related [[Interface (Java)|interfaces]], classes, and [[exception handling|exceptions]]. Refer to the separate platforms for a description of the packages available. {{off topic paragraph}}

Sun also provided an edition called [[PersonalJava|Personal Java]] that has been superseded by later, standards-based Java ME configuration-profile pairings.

==Execution system==

===Java JVM and bytecode===
{{Main|Java (software platform)|Java virtual machine}}
&lt;!-- we apparently have two main sections for what seems to be the same thing. Merge needed? --&gt;

One design goal of Java is portability, which means that programs written for the Java platform must run similarly on any combination of hardware and operating system with adequate run time support.
This is achieved by compiling the Java language code to an intermediate representation called [[Java bytecode]], instead of directly to architecture-specific [[machine code]]. Java bytecode instructions are analogous to machine code, but they are intended to be executed by a [[virtual machine]] (VM) written specifically for the host hardware. [[End user]]s commonly use a [[Java virtual machine|Java Runtime Environment]] (JRE) installed on their machine for standalone Java applications, or in a web browser for [[Java applet]]s.

Standard libraries provide a generic way to access host-specific features such as graphics, [[thread (computing)|threading]], and [[Computer network|networking]].

The use of universal bytecode makes porting simple. However, the overhead of [[Interpreter (computing)|interpreting]] bytecode into machine instructions made interpreted programs almost always run more slowly than native [[executable]]s. [[Just-in-time compilation|Just-in-time]] (JIT) compilers that compile byte-codes to machine code during runtime were introduced from an early stage. Java itself is platform-independent and is adapted to the particular platform it is to run on by a [[Java virtual machine]] for it, which translates the [[Java bytecode]] into the platform's machine language.&lt;ref&gt;{{cite web|url=http://www.programmerinterview.com/index.php/java-questions/jvm-platform-dependent/|title=Is the JVM (Java Virtual Machine) platform dependent or platform independent? What is the advantage of using the JVM, and having Java be a translated language?|publisher=Programmer Interview|accessdate=2015-01-19|archive-url=https://web.archive.org/web/20150119144223/http://www.programmerinterview.com/index.php/java-questions/jvm-platform-dependent/|archive-date=January 19, 2015|url-status=live|df=mdy-all}}&lt;/ref&gt;

====Performance====
{{Main|Java performance}}

Programs written in Java have a reputation for being slower and requiring more memory than those written in [[C++]].&lt;ref&gt;{{cite web |url=http://www.jelovic.com/articles/why_java_is_slow.htm |title=Why Java will always be slower than C++ |last=Jelovic |first=Dejan |accessdate=2008-02-15 |url-status=dead |archiveurl=https://web.archive.org/web/20080211111923/http://www.jelovic.com/articles/why_java_is_slow.htm |archivedate=February 11, 2008 |df=mdy-all }}&lt;/ref&gt;&lt;ref&gt;{{cite web |url=https://days2011.scala-lang.org/sites/days2011/files/ws3-1-Hundt.pdf |title=Loop Recognition in C++/Java/Go/Scala |last=Google| accessdate=2012-07-12 }}&lt;/ref&gt; However, Java programs' execution speed improved significantly with the introduction of [[just-in-time compilation]] in 1997/1998 for [[Java version history|Java&amp;nbsp;1.1]],&lt;ref&gt;{{cite web |url=http://www.symantec.com/about/news/release/article.jsp?prid=19970407_03 |title=Symantec's Just-In-Time Java Compiler To Be Integrated into Sun JDK 1.1 |access-date=August 1, 2009 |archive-url=https://web.archive.org/web/20100628171748/http://www.symantec.com/about/news/release/article.jsp?prid=19970407_03 |archive-date=June 28, 2010 |url-status=live |df=mdy-all }}&lt;/ref&gt; the addition of language features supporting better code analysis (such as inner classes, the StringBuilder class, optional assertions, etc.), and optimizations in the Java virtual machine, such as [[HotSpot]] becoming the default for Sun's JVM in 2000. With Java&amp;nbsp;1.5, the performance was improved with the addition of the java.util.concurrent package, including [[lock free]] implementations of the [[Java ConcurrentMap|ConcurrentMaps]] and other multi-core collections, and it was improved further with Java&amp;nbsp;1.6.

===Non-JVM===
Some platforms offer direct hardware support for Java; there are micro controllers that can run Java bytecode in hardware instead of a software Java virtual machine,&lt;ref&gt;{{Cite journal|last=Salcic|first=Zoran|last2=Park|first2=Heejong|last3=Teich|first3=Jürgen|last4=Malik|first4=Avinash|last5=Nadeem|first5=Muhammad|date=2017-07-22|title=Noc-HMP: A Heterogeneous Multicore Processor for Embedded Systems Designed in SystemJ|journal=ACM Transactions on Design Automation of Electronic Systems |volume=22|issue=4|pages=73|doi=10.1145/3073416|issn=1084-4309}}&lt;/ref&gt; and some [[ARM architecture|ARM]]-based processors could have hardware support for executing Java bytecode through their [[Jazelle]] option, though support has mostly been dropped in current implementations of ARM.

===Automatic memory management===
Java uses an [[Garbage collection (computer science)|automatic garbage collector]] to manage memory in the [[object lifetime|object lifecycle]]. The programmer determines when objects are created, and the Java runtime is responsible for recovering the memory once objects are no longer in use. Once no references to an object remain, the [[unreachable memory]] becomes eligible to be freed automatically by the garbage collector. Something similar to a [[memory leak]] may still occur if a programmer's code holds a reference to an object that is no longer needed, typically when objects that are no longer needed are stored in containers that are still in use. If methods for a non-existent object are called, a [[null pointer]] exception is thrown.&lt;ref&gt;{{cite web |url=http://docs.oracle.com/javase/8/docs/api/java/lang/NullPointerException.html |title=NullPointerException |publisher=Oracle |accessdate=2014-05-06 |archive-url=https://web.archive.org/web/20140506214735/http://docs.oracle.com/javase/8/docs/api/java/lang/NullPointerException.html |archive-date=May 6, 2014 |url-status=live |df=mdy-all }}&lt;/ref&gt;&lt;ref&gt;{{cite web |url=http://www.artima.com/designtechniques/exceptions.html |title=Exceptions in Java |publisher=Artima.com |accessdate=2010-08-10 |archive-url=https://web.archive.org/web/20090121152332/http://www.artima.com/designtechniques/exceptions.html |archive-date=January 21, 2009 |url-status=live |df=mdy-all }}&lt;/ref&gt;

One of the ideas behind Java's automatic memory management model is that programmers can be spared the burden of having to perform manual memory management. In some languages, memory for the creation of objects is implicitly allocated on the [[Stack (abstract data type)|stack]] or explicitly allocated and deallocated from the [[Memory management#DYNAMIC|heap]]. In the latter case, the responsibility of managing memory resides with the programmer. If the program does not deallocate an object, a [[memory leak]] occurs. If the program attempts to access or deallocate memory that has already been deallocated, the result is undefined and difficult to predict, and the program is likely to become unstable or crash. This can be partially remedied by the use of [[smart pointer]]s, but these add overhead and complexity. Note that garbage collection does not prevent [[logical address|logical memory]] leaks, i.e. those where the memory is still referenced but never used.

Garbage collection may happen at any time. Ideally, it will occur when a program is idle. It is guaranteed to be triggered if there is insufficient free memory on the heap to allocate a new object; this can cause a program to stall momentarily. Explicit memory management is not possible in Java.

Java does not support C/C++ style [[pointer (computer programming)|pointer arithmetic]], where object addresses can be arithmetically manipulated (e.g. by adding or subtracting an offset). This allows the garbage collector to relocate referenced objects and ensures type safety and security.

As in C++ and some other object-oriented languages, variables of Java's [[primitive data type]]s are either stored directly in fields (for objects) or on the [[Stack-based memory allocation|stack]] (for methods) rather than on the heap, as is commonly true for non-primitive data types (but see [[escape analysis]]). This was a conscious decision by Java's designers for performance reasons.

Java contains multiple types of garbage collectors. By default, HotSpot uses the [[parallel scavenge garbage collector]].&lt;ref&gt;{{cite web |url=https://docs.oracle.com/javase/7/docs/technotes/guides/vm/performance-enhancements-7.html |title=Java HotSpot™ Virtual Machine Performance Enhancements |publisher=Oracle.com |accessdate=2017-04-26 |archive-url=https://web.archive.org/web/20170529071720/http://docs.oracle.com/javase/7/docs/technotes/guides/vm/performance-enhancements-7.html |archive-date=May 29, 2017 |url-status=live |df=mdy-all }}&lt;/ref&gt; However, there are also several other garbage collectors that can be used to manage the heap. For 90% of applications in Java, the [[Concurrent mark sweep collector|Concurrent Mark-Sweep]] (CMS) garbage collector is sufficient.&lt;ref&gt;{{cite web |url=https://www.oracle.com/technetwork/java/javase/tech/vmoptions-jsp-140102.html |title=Java HotSpot VM Options |publisher=Oracle.com |date=2010-09-07 |accessdate=2012-06-30 |archive-url=https://web.archive.org/web/20110306144553/http://www.oracle.com/technetwork/java/javase/tech/vmoptions-jsp-140102.html |archive-date=March 6, 2011 |url-status=live |df=mdy-all }}&lt;/ref&gt; Oracle aims to replace CMS with the [[Garbage-first collector|Garbage-First Collector]] (G1).&lt;ref&gt;{{cite web|url=https://docs.oracle.com/javase/7/docs/technotes/guides/vm/G1.html|title=Garbage-First Collector|website=docs.oracle.com|access-date=March 15, 2016|archive-url=https://web.archive.org/web/20160309234342/http://docs.oracle.com/javase/7/docs/technotes/guides/vm/G1.html|archive-date=March 9, 2016|url-status=live|df=mdy-all}}&lt;/ref&gt;

Having solved the memory management problem does not relieve the programmer of the burden of handling properly other kind of resources, like network or database connections, file handles, etc., especially in the presence of exceptions. {{citation needed span|Paradoxically, the presence of a garbage collector has faded the necessity of having an explicit destructor method in the classes, thus rendering the management of these other resources more difficult.|date=November 2019}}

==Syntax==
{{Main|Java syntax}}
[[File:JavaUniverse.png|thumb|upright=0.9|Dependency graph of the Java Core classes (created with jdeps and [[Gephi]])]]

The syntax of Java is largely influenced by [[C++]]. Unlike C++, which combines the syntax for structured, generic, and object-oriented programming, Java was built almost exclusively as an object-oriented language.&lt;ref name="design_goals"/&gt; All code is written inside classes, and every data item is an object, with the exception of the primitive data types, (i.e. integers, floating-point numbers, [[Boolean data type|boolean values]], and characters), which are not objects for performance reasons. Java reuses some popular aspects of C++ (such as the {{java|printf}} method).

Unlike C++, Java does not support [[operator overloading]]&lt;ref name="msdn_operator_overloading"&gt;{{cite web | url=http://msdn.microsoft.com/en-us/library/ms228498%28v=vs.90%29.aspx | title=Operator Overloading (C# vs Java) | publisher=Microsoft | work=C# for Java Developers | accessdate=December 10, 2014 | archive-url=https://web.archive.org/web/20150107190007/http://msdn.microsoft.com/en-us/library/ms228498(v=vs.90).aspx | archive-date=January 7, 2015 | url-status=live | df=mdy-all }}&lt;/ref&gt; or [[multiple inheritance]] for classes, though multiple inheritance is supported for [[interface (Java)|interface]]s.&lt;ref name="oracle_multiple_inheritance"&gt;{{cite web | url=https://docs.oracle.com/javase/tutorial/java/IandI/multipleinheritance.html | title=Multiple Inheritance of State, Implementation, and Type | publisher=Oracle | work=The Java™ Tutorials | accessdate=December 10, 2014 | archive-url=https://web.archive.org/web/20141109034520/https://docs.oracle.com/javase/tutorial/java/IandI/multipleinheritance.html | archive-date=November 9, 2014 | url-status=live | df=mdy-all }}&lt;/ref&gt;

Java uses [[Comment (computer programming)|comments]] similar to those of C++. There are three different styles of comments: a single line style marked with two slashes (&lt;code&gt;//&lt;/code&gt;), a multiple line style opened with &lt;code&gt;/*&lt;/code&gt; and closed with &lt;code&gt;*/&lt;/code&gt;, and the [[Javadoc]] commenting style opened with &lt;code&gt;/**&lt;/code&gt; and closed with &lt;code&gt;*/&lt;/code&gt;. The Javadoc style of commenting allows the user to run the Javadoc executable to create documentation for the program and can be read by some [[integrated development environment]]s (IDEs) such as [[Eclipse (software)|Eclipse]] to allow developers to access documentation within the IDE.

===Hello world example===

The traditional [["Hello, world!" program|Hello world program]] can be written in Java as:&lt;ref&gt;{{cite web |url=https://docs.oracle.com/javase/tutorial/getStarted/application/index.html |title=Lesson: A Closer Look at the Hello World Application |work=The Java™ Tutorials &gt; Getting Started |publisher=[[Oracle Corporation]] |accessdate=2011-04-14 |archive-url=https://web.archive.org/web/20110317072804/http://download.oracle.com/javase/tutorial/getStarted/application/index.html |archive-date=March 17, 2011 |url-status=live |df=mdy-all }}&lt;/ref&gt;
&lt;!--
NOTE:
PLEASE *do not* change the example code; it's written in Sun's recommended style. That includes the brace style.
 --&gt;
&lt;syntaxhighlight lang="java"&gt;
public class HelloWorldApp {
    public static void main(String[] args) {
        System.out.println("Hello World!"); // Prints the string to the console.
    }
}
&lt;/syntaxhighlight&gt;

Source files must be named after the public class they contain, appending the suffix &lt;code&gt;.java&lt;/code&gt;, for example, &lt;code&gt;HelloWorldApp.java&lt;/code&gt;. It must first be compiled into bytecode, using a [[Java compiler]], producing a file with the &lt;code&gt;.class&lt;/code&gt; suffix (&lt;code&gt;HelloWorldApp.class&lt;/code&gt;, in this case). Only then can it be executed, or launched. The Java source file may only contain one public class, but it can contain multiple classes with a non-public access modifier and any number of public [[inner class]]es. When the source file contains multiple classes, it is necessary to make one class (introduced by the &lt;code&gt;'''class'''&lt;/code&gt; keyword) public (preceded by the &lt;code&gt;'''public'''&lt;/code&gt; keyword) and name the source file with that public class name.

A class that is not declared public may be stored in any .java file. The compiler will generate a class file for each class defined in the source file. The name of the class file is the name of the class, with ''.class'' appended. For class file generation, [[Class (computer programming)#Unnamed|anonymous classes]] are treated as if their name were the concatenation of the name of their enclosing class, a ''$'', and an integer.

The [[List of Java keywords|keyword]] &lt;code&gt;'''public'''&lt;/code&gt; denotes that a method can be called from code in other classes, or that a class may be used by classes outside the class hierarchy. The class hierarchy is related to the name of the directory in which the .java file is located. This is called an access level modifier. Other access level modifiers include the keywords &lt;code&gt;'''private'''&lt;/code&gt; and &lt;code&gt;'''protected'''&lt;/code&gt;.

The keyword &lt;code&gt;'''static'''&lt;/code&gt;&lt;ref name=":0" /&gt; in front of a method indicates a [[Method (computer programming)#Static methods|static method]], which is associated only with the class and not with any specific instance of that class. Only static methods can be invoked without a reference to an object. Static methods cannot access any class members that are not also static. Methods that are not designated static are instance methods and require a specific instance of a class to operate.

The keyword &lt;code&gt;'''void'''&lt;/code&gt; indicates that the main method does not return any value to the caller. If a Java program is to exit with an error code, it must call System.exit() explicitly.

The method name &lt;code&gt;main&lt;/code&gt; is not a keyword in the Java language. It is simply the name of the method the Java launcher calls to pass control to the program. Java classes that run in managed environments such as applets and [[Enterprise JavaBeans]] do not use or need a &lt;code&gt;main()&lt;/code&gt; method. A Java program may contain multiple classes that have &lt;code&gt;main&lt;/code&gt; methods, which means that the VM needs to be explicitly told which class to launch from.

The main method must accept an [[array data type|array]] of '''{{Javadoc:SE|java/lang|String}}''' objects. By convention, it is referenced as &lt;code&gt;'''args'''&lt;/code&gt; although any other legal identifier name can be used. Since Java&amp;nbsp;5, the main method can also use [[variadic function|variable arguments]], in the form of &lt;code&gt;public static void main(String... args)&lt;/code&gt;, allowing the main method to be invoked with an arbitrary number of &lt;code&gt;String&lt;/code&gt; arguments. The effect of this alternate declaration is semantically identical (to the &lt;code&gt;args&lt;/code&gt; parameter which is still an array of &lt;code&gt;String&lt;/code&gt; objects), but it allows an alternative syntax for creating and passing the array.

The Java launcher launches Java by loading a given class (specified on the command line or as an attribute in a [[JAR (file format)|JAR]]) and starting its &lt;code&gt;public static void main(String[])&lt;/code&gt; method. Stand-alone programs must declare this method explicitly. The &lt;code&gt;String[] args&lt;/code&gt; parameter is an [[array data type|array]] of {{Javadoc:SE|java/lang|String}} objects containing any arguments passed to the class. The parameters to &lt;code&gt;main&lt;/code&gt; are often passed by means of a [[command-line interface|command line]].

Printing is part of a Java standard library: The '''{{Javadoc:SE|java/lang|System}}''' class defines a public static field called '''{{Javadoc:SE|name=out|java/lang|System|out}}'''. The &lt;code&gt;out&lt;/code&gt; object is an instance of the {{Javadoc:SE|java/io|PrintStream}} class and provides many methods for printing data to [[standard streams|standard out]], including '''{{Javadoc:SE|name=println(String)|java/io|PrintStream|println(java.lang.String)}}''' which also appends a new line to the passed string.

The string &lt;code&gt;"Hello World!"&lt;/code&gt; is automatically converted to a String object by the compiler.

===Example with methods===
&lt;syntaxhighlight lang="java"&gt;
// This is an example of a single line comment using two slashes

/*
 * This is an example of a multiple line comment using the slash and asterisk.
 * This type of comment can be used to hold a lot of information or deactivate
 * code, but it is very important to remember to close the comment.
 */

package fibsandlies;

import java.util.Map;
import java.util.HashMap;

/**
 * This is an example of a Javadoc comment; Javadoc can compile documentation
 * from this text. Javadoc comments must immediately precede the class, method,
 * or field being documented.
 */
public class FibCalculator extends Fibonacci implements Calculator {
    private static Map&lt;Integer, Integer&gt; memoized = new HashMap&lt;&gt;();

    /*
     * The main method written as follows is used by the JVM as a starting point
     * for the program.
     */
    public static void main(String[] args) {
        memoized.put(1, 1);
        memoized.put(2, 1);
        System.out.println(fibonacci(12)); // Get the 12th Fibonacci number and print to console
    }

    /**
     * An example of a method written in Java, wrapped in a class.
     * Given a non-negative number FIBINDEX, returns
     * the Nth Fibonacci number, where N equals FIBINDEX.
     * 
     * @param fibIndex The index of the Fibonacci number
     * @return the Fibonacci number
     */
    public static int fibonacci(int fibIndex) {
        if (memoized.containsKey(fibIndex)) return memoized.get(fibIndex);
        else {
            int answer = fibonacci(fibIndex - 1) + fibonacci(fibIndex - 2);
            memoized.put(fibIndex, answer);
            return answer;
        }
    }
}
&lt;/syntaxhighlight&gt;

==Special classes==
{{more citations needed|section|date=May 2019}}

===Applet===
{{Main|Java applet}}

Java applets were programs that were [[Embedded system#Embedded software architectures|embedded]] in other applications, typically in a Web page displayed in a web browser.  The Java applet API is now deprecated since Java&amp;nbsp;8 in 2017.&lt;ref&gt;{{Cite web|url=https://www.oracle.com/technetwork/java/javase/9-deprecated-features-3745636.html#JDK-8074165|title=Deprecated APIs, Features, and Options|website=www.oracle.com|access-date=2019-05-31}}&lt;/ref&gt; &lt;ref&gt;{{Cite web|title=Applet (Java Platform SE 7 )|url=https://docs.oracle.com/javase/7/docs/api/java/applet/Applet.html|website=docs.oracle.com|access-date=2020-05-01}}&lt;/ref&gt;

===Servlet===
{{Main Article| Java servlet}}

[[Java servlet]] technology provides Web developers with a simple, consistent mechanism for extending the functionality of a Web server and for accessing existing business systems. Servlets are [[server-side]] Java EE components that generate responses (typically [[HTML]] pages) to requests (typically [[Hypertext Transfer Protocol|HTTP]] requests) from [[client (computing)|clients]].

The Java servlet API has to some extent been superseded by two standard Java technologies for web services:

* the [[Java API for RESTful Web Services]] (JAX-RS 2.0) useful for AJAX, JSON and REST services, and
* the [[Java API for XML Web Services]] (JAX-WS) useful for  [[SOAP]] [[Web Service]]s.

===JavaServer Pages===
{{Main|JavaServer Pages}}

JavaServer Pages (JSP) are [[server-side]] Java EE components that generate responses, typically [[HTML]] pages, to [[Hypertext Transfer Protocol|HTTP]] requests from [[client (computing)|clients]]. JSPs embed Java code in an HTML page by using the special [[delimiter]]s &lt;code&gt;&lt;%&lt;/code&gt; and &lt;code&gt;%&gt;&lt;/code&gt;. A JSP is compiled to a Java ''servlet'', a Java application in its own right, the first time it is accessed. After that, the generated servlet creates the response. &lt;ref&gt;{{Cite web|title=What Is a JSP Page? - The Java EE 5 Tutorial|url=https://docs.oracle.com/javaee/5/tutorial/doc/bnagy.html|website=docs.oracle.com|access-date=2020-05-01}}&lt;/ref&gt;

===Swing application===
{{Main|Swing (Java)}}

[[Swing (Java)|Swing]] is a graphical user interface [[library (computing)|library]] for the Java SE platform. It is possible to specify a different look and feel through the [[pluggable look and feel]] system of Swing. Clones of [[Microsoft Windows|Windows]], [[GTK+]], and [[Motif (software)|Motif]] are supplied by Sun. [[Apple Inc.|Apple]] also provides an [[Aqua (user interface)|Aqua]] look and feel for [[macOS]]. Where prior implementations of these looks and feels may have been considered lacking, Swing in Java SE 6 addresses this problem by using more native [[Graphical control element|GUI widget]] drawing routines of the underlying platforms. &lt;ref&gt;{{Cite web|title=Trail: Creating a GUI With JFC/Swing (The Java™ Tutorials)|url=https://docs.oracle.com/javase/tutorial/uiswing/index.html|website=docs.oracle.com|access-date=2020-05-01}}&lt;/ref&gt;

===JavaFX application===
{{Main|JavaFX}}
[[JavaFX]] is a [[Computing platform|software platform]] for creating and delivering [[Application software|desktop applications]], as well as [[Rich Internet application|rich Internet applications (RIAs)]] that can run across a wide variety of devices. JavaFX is intended to replace [[Swing (Java)|Swing]] as the standard [[Graphical User Interface|GUI]] library for [[Java Platform, Standard Edition|Java SE]], but both will be included for the foreseeable future. JavaFX has support for [[desktop computer]]s and [[web browser]]s on [[Microsoft Windows]], [[Linux]], and [[macOS]]. JavaFX does not have support for native OS look and feels. &lt;ref&gt;{{Cite web|title=Getting Started with JavaFX: Hello World, JavaFX Style {{!}} JavaFX 2 Tutorials and Documentation|url=https://docs.oracle.com/javafx/2/get_started/hello_world.htm|website=docs.oracle.com|access-date=2020-05-01}}&lt;/ref&gt;

===Generics===
{{Main|Generics in Java}}

In 2004, [[generic programming|generics]] were added to the Java language, as part of J2SE 5.0. Prior to the introduction of generics, each variable declaration had to be of a specific type. For container classes, for example, this is a problem because there is no easy way to create a container that accepts only specific types of objects. Either the container operates on all subtypes of a class or interface, usually &lt;code&gt;Object&lt;/code&gt;, or a different container class has to be created for each contained class. Generics allow compile-time type checking without having to create many container classes, each containing almost identical code. In addition to enabling more efficient code, certain runtime exceptions are prevented from occurring, by issuing compile-time errors. If Java prevented all runtime type errors (&lt;code&gt;ClassCastException&lt;/code&gt;s) from occurring, it would be [[type safety|type safe]].

In 2016, the type system of Java was proven [[soundness|unsound]].&lt;ref&gt;{{cite web|url=https://raw.githubusercontent.com/namin/unsound/master/doc/unsound-oopsla16.pdf|title=Java and Scala's Type Systems are Unsound|access-date=February 20, 2017|archive-url=https://web.archive.org/web/20161128174902/https://raw.githubusercontent.com/namin/unsound/master/doc/unsound-oopsla16.pdf|archive-date=November 28, 2016|url-status=live|df=mdy-all}}&lt;/ref&gt;

==Criticism==
{{Main|Criticism of Java}}

Criticisms directed at Java include the implementation of generics,&lt;ref&gt;{{cite web
 |last=Arnold 
 |first=Ken 
 |title=Generics Considered Harmful 
 |url=https://weblogs.java.net/blog/arnold/archive/2005/06/generics_consid_1.html 
 |publisher=java.net 
 |accessdate=September 10, 2015 
 |url-status=bot: unknown 
 |archiveurl=https://web.archive.org/web/20071010002142/http://weblogs.java.net/blog/arnold/archive/2005/06/generics_consid_1.html 
 |archivedate=October 10, 2007 
}}. More comments to the original article available at earlier archive snapshots like .&lt;/ref&gt; speed,&lt;ref&gt;{{cite web
 |last        = Jelovic
 |first       = Dejan
 |title       = Why Java Will Always Be Slower than C++
 |url         = http://www.jelovic.com/articles/why_java_is_slow.htm
 |publisher   = www.jelovic.com
 |accessdate  = October 17, 2012
 |url-status     = dead
 |archiveurl  = https://web.archive.org/web/20080211111923/http://www.jelovic.com/articles/why_java_is_slow.htm
 |archivedate = February 11, 2008
 |df          = mdy-all
}}&lt;/ref&gt; the handling of unsigned numbers,&lt;ref&gt;{{cite web
|last=Owens |first=Sean R.
|url=http://darksleep.com/player/JavaAndUnsignedTypes.html
|archiveurl=https://web.archive.org/web/20090220171410/http://darksleep.com/player/JavaAndUnsignedTypes.html
|archivedate=February 20, 2009 |title=Java and unsigned int, unsigned short, unsigned byte, unsigned long, etc. (Or rather, the lack thereof)
|accessdate=2011-07-04 }}&lt;/ref&gt; the implementation of floating-point arithmetic,&lt;ref&gt;{{cite web
 |last         = Kahan
 |first        = William
 |title        = How Java's Floating-Point Hurts Everyone Everywhere
 |url          = http://www.cs.berkeley.edu/~wkahan/JAVAhurt.pdf
 |publisher    = Electrical Engineering &amp; Computer Science, University of California at Berkeley
 |accessdate   = June 4, 2011
 |archive-url  = https://web.archive.org/web/20120905004527/http://www.cs.berkeley.edu/~wkahan/JAVAhurt.pdf
 |archive-date = September 5, 2012
 |url-status     = live
 |df           = mdy-all
}}&lt;/ref&gt; and a history of security vulnerabilities in the primary Java VM implementation [[HotSpot]].&lt;ref&gt;{{cite web
 |url          = http://blogs.technet.com/b/mmpc/archive/2010/10/18/have-you-checked-the-java.aspx
 |title        = Have you checked the Java?
 |access-date  = December 23, 2011
 |archive-url  = https://web.archive.org/web/20120921140402/http://blogs.technet.com/b/mmpc/archive/2010/10/18/have-you-checked-the-java.aspx
 |archive-date = September 21, 2012
 |url-status   = dead
 |df           = mdy-all
}}&lt;/ref&gt;

==Class libraries==
{{Main|Java Class Library}}

The [[Java Class Library]] is the [[standard library]], developed to support application development in Java. It is controlled by [[Oracle Corporation|Oracle]] in cooperation with others through the [[Java Community Process]] program.&lt;ref&gt;{{Citation|last=Cadenhead|first=Rogers|title=Understanding How Java Programs Work|date=2017-11-20|url=http://www.informit.com/articles/article.aspx?p=2832404&amp;seqNum=4|access-date=2019-03-26}}&lt;/ref&gt; Companies or individuals participating in this process can influence the design and development of the APIs. This process has been a subject of controversy during the 2010s.&lt;ref&gt;{{Cite news|url=https://www.theguardian.com/technology/2016/may/26/google-wins-copyright-lawsuit-oracle-java-code|title=Google wins six-year legal battle with Oracle over Android code copyright|last=Woolf|first=Nicky|date=2016-05-26|work=The Guardian|access-date=2019-03-26|language=en-GB|issn=0261-3077}}&lt;/ref&gt; The class library contains features such as:

* The core libraries, which include:
** IO/NIO
** Networking
** [[Reflection (computer programming)|Reflection]]
** [[Concurrent computing|Concurrency]]
** [[Generics in Java|Generics]]
** Scripting/Compiler
** [[Functional programming]] (Lambda, Streaming)
** [[Java collections framework|Collection libraries]] that implement [[data structure]]s such as [[List (abstract data type)|lists]], [[associative array|dictionaries]], [[tree structure|trees]], [[Set (abstract data type)|sets]], [[Queue (abstract data type)|queues]] and [[double-ended queue]], or [[Stack (abstract data type)|stacks]]&lt;ref name="collections"&gt;{{cite web | url=http://docs.oracle.com/javase/8/docs/technotes/guides/collections/overview.html | title=Collections Framework Overview | publisher=Oracle | work=Java Documentation | accessdate=December 18, 2014 | archive-url=https://web.archive.org/web/20141231132540/http://docs.oracle.com/javase/8/docs/technotes/guides/collections/overview.html | archive-date=December 31, 2014 | url-status=live | df=mdy-all }}&lt;/ref&gt;
** [[XML]] Processing (Parsing, Transforming, Validating) libraries
** [[Computer security|Security]]&lt;ref name="security"&gt;{{cite web | url=http://docs.oracle.com/javase/8/docs/technotes/guides/security/overview/jsoverview.html | title=Java™ Security Overview | publisher=Oracle | work=Java Documentation | accessdate=December 18, 2014 | archive-url=https://web.archive.org/web/20150103045031/http://docs.oracle.com/javase/8/docs/technotes/guides/security/overview/jsoverview.html | archive-date=January 3, 2015 | url-status=live | df=mdy-all }}&lt;/ref&gt;
** [[Internationalization and localization]] libraries&lt;ref name="i18n"&gt;{{cite web | url=http://docs.oracle.com/javase/tutorial/i18n/ | title=Trail: Internationalization | publisher=Oracle | work=The Java™ Tutorials | accessdate=December 18, 2014 | archive-url=https://web.archive.org/web/20141231053232/http://docs.oracle.com/javase/tutorial/i18n/ | archive-date=December 31, 2014 | url-status=live | df=mdy-all }}&lt;/ref&gt;
* The integration libraries, which allow the application writer to communicate with external systems. These libraries include:
** The [[Java Database Connectivity]] (JDBC) [[Application programming interface|API]] for database access
** [[Java Naming and Directory Interface]] (JNDI) for lookup and discovery
** [[Java remote method invocation|RMI]] and [[Common Object Request Broker Architecture|CORBA]] for distributed application development
** [[Java Management Extensions|JMX]] for managing and monitoring applications
* [[User interface]] libraries, which include:
** The (heavyweight, or [[Native (computing)|native]]) [[Abstract Window Toolkit]] (AWT), which provides [[graphical user interface|GUI]] components, the means for laying out those components and the means for handling events from those components
** The (lightweight) [[Swing (Java)|Swing]] libraries, which are built on AWT but provide (non-native) implementations of the AWT widgetry
** APIs for audio capture, processing, and playback
** [[JavaFX]]
* A platform dependent implementation of the Java virtual machine that is the means by which the bytecodes of the Java libraries and third party applications are executed
* Plugins, which enable [[Java applet|applets]] to be run in web browsers
* [[Java Web Start]], which allows Java applications to be efficiently distributed to [[end user]]s across the Internet
* Licensing and documentation

==Documentation==
{{Main|Javadoc}}

Javadoc is a comprehensive documentation system, created by [[Sun Microsystems]], used by many Java developers{{by whom|date=September 2015}}. It provides developers with an organized system for documenting their code. Javadoc comments have an extra asterisk at the beginning, i.e. the delimiters are &lt;code&gt;/**&lt;/code&gt; and &lt;code&gt;*/&lt;/code&gt;, whereas the normal multi-line comments in Java are set off with the delimiters &lt;code&gt;/*&lt;/code&gt; and &lt;code&gt;*/&lt;/code&gt;.&lt;ref name="javadoc_comments"&gt;{{cite web | url=https://www.oracle.com/technetwork/articles/java/index-137868.html | title=How to Write Doc Comments for the Javadoc Tool | publisher=Oracle | work=Oracle Technology Network | accessdate=December 18, 2014 | archive-url=https://web.archive.org/web/20141218182906/http://www.oracle.com/technetwork/articles/java/index-137868.html | archive-date=December 18, 2014 | url-status=live | df=mdy-all }}&lt;/ref&gt;

==Implementations==
{{See also|Free Java implementations}}

[[Oracle Corporation]] is the current owner of the official implementation of the Java SE platform, following their acquisition of [[Sun Microsystems]] on January 27, 2010. This implementation is based on the original implementation of Java by Sun. The Oracle implementation is available for [[Microsoft Windows]] (still works for XP, while only later versions are currently officially supported), [[macOS]], [[Linux]], and [[Solaris (operating system)|Solaris]]. Because Java lacks any formal standardization recognized by [[Ecma International]], ISO/IEC, ANSI, or other third-party standards organization, the Oracle implementation is the [[de facto standard]].

The Oracle implementation is packaged into two different distributions: The Java Runtime Environment (JRE) which contains the parts of the Java SE platform required to run Java programs and is intended for end users, and the [[Java Development Kit]] (JDK), which is intended for software developers and includes development tools such as the [[Java compiler]], [[Javadoc]], [[JAR (file format)|Jar]], and a [[debugger]]. Oracle has also released [[GraalVM]], a high performance Java dynamic compiler and interpreter.

[[OpenJDK]] is another notable Java SE implementation that is licensed under the GNU GPL. The implementation started when Sun began releasing the Java source code under the GPL. As of Java SE 7, OpenJDK is the official Java reference implementation.

The goal of Java is to make all implementations of Java compatible. Historically, Sun's trademark license for usage of the Java brand insists that all implementations be ''compatible''. This resulted in a legal dispute with [[Microsoft]] after Sun claimed that the Microsoft implementation did not support [[Java remote method invocation|RMI]] or [[Java Native Interface|JNI]] and had added platform-specific features of their own. Sun sued in 1997, and, in 2001, won a settlement of US$20&amp;nbsp;million, as well as a court order enforcing the terms of the license from Sun.&lt;ref&gt;{{cite news |author=Niccolai, James |title=Sun, Microsoft settle Java lawsuit |url=https://www.javaworld.com/javaworld/jw-01-2001/jw-0124-iw-mssuncourt.html |work=JavaWorld |publisher=[[International Data Group]] |date=January 23, 2001 |accessdate=2008-07-09 |archive-url=https://web.archive.org/web/20080528233154/http://www.javaworld.com/javaworld/jw-01-2001/jw-0124-iw-mssuncourt.html |archive-date=May 28, 2008 |url-status=live |df=mdy-all }}&lt;/ref&gt; As a result, Microsoft no longer ships Java with [[Microsoft Windows|Windows]].

Platform-independent Java is essential to [[Java Platform, Enterprise Edition|Java EE]], and an even more rigorous validation is required to certify an implementation. This environment enables portable server-side applications.

==Use outside the Java platform==
The Java programming language requires the presence of a software platform in order for compiled programs to be executed.

Oracle supplies the [[Java platform]] for use with Java. The [[Android SDK]] is an alternative software platform, used primarily for developing [[Android application]]s with its own GUI system.

===Android===
[[File:Android 6.0-en.png|thumb|upright|The [[Android (operating system)|Android]] operating system makes extensive use of Java-related technology]]

The Java language is a key pillar in [[Android (operating system)|Android]], an [[open source software|open source]] [[mobile operating system]]. Although Android, built on the [[Linux kernel]], is written largely in C, the [[Android software development#SDK|Android SDK]] uses the Java language as the basis for Android applications but does not use any of its standard GUI, SE, ME or other established Java standards.&lt;ref&gt;{{cite web
| url=http://www.javalobby.org/nl/archive/jlnews_20071113o.html
| title=Google Android: Initial Impressions and Criticism
| date=November 13, 2007
| last=van Gurp|first=Jilles
| work=Javalobby
| quote=''Frankly, I don't understand why Google intends to ignore the vast amount of existing implementation out there. It seems like a bad case of "not invented here" to me. Ultimately, this will slow adoption. There are already too many Java platforms for the mobile world and this is yet another one''
| accessdate=March 7, 2009}}&lt;/ref&gt; The bytecode language supported by the Android SDK is incompatible with Java bytecode and runs on its own virtual machine, optimized for low-memory devices such as [[smartphone]]s and [[tablet computer]]s. Depending on the Android version, the bytecode is either interpreted by the [[Dalvik (software)|Dalvik virtual machine]] or compiled into native code by the [[Android Runtime]].

Android does not provide the full Java SE standard library, although the Android SDK does include an independent implementation of a large subset of it. It supports Java&amp;nbsp;6 and some Java&amp;nbsp;7 features, offering an implementation compatible with the standard library ([[Apache Harmony]]).

====Controversy====
{{See also|Oracle America, Inc. v. Google, Inc.}}
The use of Java-related technology in Android led to a legal dispute between Oracle and Google. On May 7, 2012, a San Francisco jury found that if APIs could be copyrighted, then Google had infringed Oracle's copyrights by the use of Java in Android devices.&lt;ref&gt;{{cite web |last=Mullin |first=Joe |title=Google guilty of infringement in Oracle trial; future legal headaches loom |url=https://arstechnica.com/tech-policy/news/2012/05/jury-rules-google-violated-copyright-law-google-moves-for-mistrial.ars |work=Law &amp; Disorder |publisher=Ars Technica |accessdate=2012-05-08 |archive-url=https://web.archive.org/web/20120508134916/http://arstechnica.com/tech-policy/news/2012/05/jury-rules-google-violated-copyright-law-google-moves-for-mistrial.ars |archive-date=May 8, 2012 |url-status=live |df=mdy-all }}&lt;/ref&gt; District Judge [[William Haskell Alsup]] ruled on May 31, 2012, that APIs cannot be copyrighted,&lt;ref&gt;{{cite web
 |title        = Google wins crucial API ruling, Oracle's case decimated
 |url          = https://arstechnica.com/tech-policy/2012/05/google-wins-crucial-api-ruling-oracles-case-decimated/
 |first        = Joe
 |last         = Mullin
 |work         = Ars Technica
 |date         = May 31, 2012
 |accessdate   = 2012-06-01
 |archive-url  = https://web.archive.org/web/20170312065520/https://arstechnica.com/tech-policy/2012/05/google-wins-crucial-api-ruling-oracles-case-decimated/
 |archive-date = March 12, 2017
 |url-status     = live
 |df           = mdy-all
}}&lt;/ref&gt; but this was reversed by the United States Court of Appeals for the Federal Circuit in May 2014.&lt;ref name="cnet appeals"&gt;{{cite news | url=https://www.cnet.com/news/court-sides-with-oracle-over-android-in-java-patent-appeal/ | title=Court sides with Oracle over Android in Java patent appeal | work=CNET | date=May 9, 2014 | accessdate=2014-05-10 | author=Rosenblatt, Seth | archive-url=https://web.archive.org/web/20140510203805/http://www.cnet.com/news/court-sides-with-oracle-over-android-in-java-patent-appeal/ | archive-date=May 10, 2014 | url-status=live | df=mdy-all }}&lt;/ref&gt; On May 26, 2016, the district court decided in favor of Google, ruling the copyright infringement of the Java API in Android constitutes fair use.&lt;ref&gt;{{cite web |last1=Mullin |first1=Joe |title=Google beats Oracle—Android makes "fair use" of Java APIs |url=https://arstechnica.com/tech-policy/2016/05/google-wins-trial-against-oracle-as-jury-finds-android-is-fair-use/ |accessdate=2016-05-26 |website=Ars Technica |date=2016-05-26 |archive-url=https://web.archive.org/web/20170120164551/http://arstechnica.com/tech-policy/2016/05/google-wins-trial-against-oracle-as-jury-finds-android-is-fair-use/ |archive-date=January 20, 2017 |url-status=live |df=mdy-all }}&lt;/ref&gt; On March 2018, this ruling was overturned by the Appeals Court, which sent down the case of determining the damages to federal court in San Francisco.&lt;ref&gt;
{{cite web
 |title        = "Google's use of the Java API packages was not fair," appeals court rules
 |url          = https://arstechnica.com/tech-policy/2018/03/googles-use-of-the-java-api-packages-was-not-fair-appeals-court-rules/
 |first        = Cyrus
 |last         = Farivar
 |work         = Ars Technica
 |date         = March 27, 2018
 |accessdate   = 2019-08-06
}}
&lt;/ref&gt;
Google filed a petition for writ of certiorari with the [[Supreme Court of the United States]] in January 2019 to challenge the two rulings that were made by the Appeals Court towards Oracle's favor.&lt;ref&gt;{{cite web | url = https://arstechnica.com/tech-policy/2019/01/google-asks-supreme-court-to-overrule-disastrous-ruling-on-api-copyrights/ | title = Google asks Supreme Court to overrule disastrous ruling on API copyrights | first=  Timothy | last =Lee | date = April 23, 2019 | accessdate = April 23, 2019 | work =[[Ars Technica]] }}&lt;/ref&gt;

==See also==
{{Portal|Computer programming}}
{{Wikipedia books|Programming for Students}}
* [[C Sharp (programming language)|C#]]
* [[C++]]
* [[Dalvik (software)|Dalvik]], used in old Android versions, replaced by non-JIT [[Android Runtime]]
* [[Deterministic Parallel Java]]
* [[List of Java virtual machines]]
* [[List of Java APIs]]
* [[List of JVM languages]]

===Comparison of Java with other languages===
* [[Comparison of C Sharp and Java|Comparison of C# and Java]]
* [[Comparison of Java and C++]]

==References==
{{Reflist|25em}}

==Works cited==
{{refbegin}}
* {{cite book|last1=Gosling|first1=James|last2=Joy|first2=Bill|last3=Steele|first3=Guy|last4=Bracha|first4=Gilad|last5=Buckley|first5=Alex|title=The Java® Language Specification|date=2014|edition=Java SE 8|url=https://docs.oracle.com/javase/specs/jls/se8/jls8.pdf|ref=harv}}
* {{cite book |last1=Gosling |first1=James |last2=Joy |first2=Bill |authorlink2=Bill Joy |last3=Steele |first3=Guy L., Jr. |authorlink3=Guy L. Steele, Jr. |first4=Gilad |last4=Bracha |authorlink4=Gilad Bracha |title=The Java Language Specification |url=https://java.sun.com/docs/books/jls/index.html |edition=3rd |year=2005 |publisher=Addison-Wesley |isbn=0-321-24678-0 }}
* {{cite book |last1=Lindholm |first1=Tim |last2=Yellin |first2=Frank |title=The Java Virtual Machine Specification |url=https://java.sun.com/docs/books/vmspec/2nd-edition/html/VMSpecTOC.doc.html |edition=2nd |year=1999 |publisher=Addison-Wesley |isbn=0-201-43294-3 }}
{{refend}}

==External links==
{{wikiversity|Java Platform, Enterprise Edition/Java EE Tutorial}}
*{{Wiktionary-inline|Java}}
*{{Commons-inline|Category:Java (programming language)|Java}}
*{{Wikibooks-inline|Subject:Java programming language|Java}}
*{{Wikiversity-inline|Java}}

{{Java (software platform)}}
{{Sun Microsystems}}
{{Oracle}}
{{Programming languages}}
{{FOSS}}
{{Authority control}}

[[Category:Articles with example Java code]]
[[Category:C programming language family]]
[[Category:Class-based programming languages]]
[[Category:Computer-related introductions in 1995]]
[[Category:Concurrent programming languages]]
[[Category:Java (programming language)| ]]
[[Category:Java platform|Programming language]]
[[Category:Java specification requests|Programming language]]
[[Category:JVM programming languages]]
[[Category:Multi-paradigm programming languages]]
[[Category:Object-oriented programming languages]]
[[Category:Programming languages created in 1995]]
[[Category:Programming languages]]
[[Category:Statically typed programming languages]]
[[Category:Sun Microsystems]]</text>
      <sha1>4ukrsrazp8z5eqm7vkkqjkg0wh8ju96</sha1>
    </revision>
  </page>
</mediawiki>
